import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import pandas as pd
import os
import random
import matplotlib.pyplot as plt
import torch.nn.functional as F
from torch.utils.data import Dataset, DataLoader
from google.colab import drive
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

WAVELENGTHS = np.arange(380, 781, 1) # 파장 범위 및 간격 (nm), 예시로 5nm 간격
NUM_WAVELENGTHS = len(WAVELENGTHS)
drive.mount('/content/drive')
DRIVE_PATH = '/content/drive/MyDrive/Colab Notebooks/Forward Model/MDN 3층/굴절률데이터들/'

material_files = [
    #('HfO2', 'HfO2_380.csv'),
    #('LiF',  'LiF_380.csv'),
    ('SiO2', 'SiO2_380.csv'),
    ('WO3',  'WO3_380.csv'),
    #('ZnS',  'ZnS_380.csv'),
    #('Al2O3',  'Al2O3_380.csv'),
    #('MgF2',  'MgF2_380.csv'),
    #('TiO2',  'TiO2_380.csv'),
    ('Ag' , 'Ag_380.csv')
]
material_data = {}
material_names = [info[0] for info in material_files]
print(material_names)

material_names = sorted(set(info[0] for info in material_files))  # 순서 고정
material_to_index = {name: i for i, name in enumerate(material_names)}
index_to_material = {i: name for name, i in material_to_index.items()}
print(index_to_material)

# --- 절연체 파일 처리 ---
for material_name, filename in material_files:
    file_path = os.path.join(DRIVE_PATH, filename)
    print(f"처리 중: {filename} (materials: {material_name})")
    data = pd.read_csv(file_path, header=None)

    num_samples_in_file = data.shape[0]
    if num_samples_in_file == 0:
        print(f"  경고: 파일이 비어있습니다.")
        continue
    print(f"  로드된 샘플 수: {num_samples_in_file}")

    # 파장, n, k 분리
    wavelengths = data.iloc[:,
        0].values  # 첫 번째 열: 파장
    n = data.iloc[:, 1].values            # 두 번째 열: n
    k = data.iloc[:, 2].values            # 세 번째 열: k

    # 복소 굴절률 생성
    n_complex = n + 1j * k

    # insulator_data에 저장
    material_data[material_name] = (wavelengths, n_complex)
# --- 공기 굴절률 처리 ---
material_data['Air'] = np.ones(NUM_WAVELENGTHS, dtype=np.complex128)

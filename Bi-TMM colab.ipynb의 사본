{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":5086,"status":"ok","timestamp":1753061789479,"user":{"displayName":"이스타의행운","userId":"08935579543132628543"},"user_tz":-540},"id":"OKdr0AFPWE7x"},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import numpy as np\n","import pandas as pd\n","import os\n","import random\n","import matplotlib.pyplot as plt\n","import torch.nn.functional as F\n","from torch.utils.data import Dataset, DataLoader\n","from google.colab import drive\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":33160,"status":"ok","timestamp":1753061822650,"user":{"displayName":"이스타의행운","userId":"08935579543132628543"},"user_tz":-540},"id":"q6wcpY_qWA9B","outputId":"63d027a8-3bfd-4f0f-ed7d-4552229b8763"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","['SiO2', 'WO3', 'Ag']\n","{0: 'Ag', 1: 'SiO2', 2: 'WO3'}\n","처리 중: SiO2_380.csv (materials: SiO2)\n","  로드된 샘플 수: 401\n","처리 중: WO3_380.csv (materials: WO3)\n","  로드된 샘플 수: 401\n","처리 중: Ag_380.csv (materials: Ag)\n","  로드된 샘플 수: 401\n"]}],"source":["WAVELENGTHS = np.arange(380, 781, 1) # 파장 범위 및 간격 (nm), 예시로 5nm 간격\n","NUM_WAVELENGTHS = len(WAVELENGTHS)\n","drive.mount('/content/drive')\n","DRIVE_PATH = '/content/drive/MyDrive/Colab Notebooks/Forward Model/MDN 3층/굴절률데이터들/'\n","material_files = [\n","    #('HfO2', 'HfO2_380.csv'), # 사용자 코드에서 가져온 변수명 기반 추정\n","    #('LiF',  'LiF_380.csv'),\n","    ('SiO2', 'SiO2_380.csv'),\n","    ('WO3',  'WO3_380.csv'),\n","    #('ZnS',  'ZnS_380.csv'),\n","    #('Al2O3',  'Al2O3_380.csv'),\n","    #('MgF2',  'MgF2_380.csv'),\n","    #('TiO2',  'TiO2_380.csv'),\n","    ('Ag' , 'Ag_380.csv')\n","]\n","material_data = {}\n","material_names = [info[0] for info in material_files]\n","print(material_names)\n","\n","material_names = sorted(set(info[0] for info in material_files))  # 순서 고정\n","material_to_index = {name: i for i, name in enumerate(material_names)}\n","index_to_material = {i: name for name, i in material_to_index.items()}\n","print(index_to_material)\n","\n","# --- 절연체 파일 처리 ---\n","for material_name, filename in material_files:\n","    file_path = os.path.join(DRIVE_PATH, filename)\n","    print(f\"처리 중: {filename} (materials: {material_name})\")\n","    data = pd.read_csv(file_path, header=None)\n","\n","    num_samples_in_file = data.shape[0]\n","    if num_samples_in_file == 0:\n","        print(f\"  경고: 파일이 비어있습니다.\")\n","        continue\n","    print(f\"  로드된 샘플 수: {num_samples_in_file}\")\n","\n","    # 파장, n, k 분리\n","    wavelengths = data.iloc[:,\n","        0].values  # 첫 번째 열: 파장\n","    n = data.iloc[:, 1].values            # 두 번째 열: n\n","    k = data.iloc[:, 2].values            # 세 번째 열: k\n","\n","    # 복소 굴절률 생성\n","    n_complex = n + 1j * k\n","\n","    # insulator_data에 저장\n","    material_data[material_name] = (wavelengths, n_complex)\n","# --- 공기 굴절률 처리 ---\n","material_data['Air'] = np.ones(NUM_WAVELENGTHS, dtype=np.complex128)\n"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":280,"status":"ok","timestamp":1753061822956,"user":{"displayName":"이스타의행운","userId":"08935579543132628543"},"user_tz":-540},"id":"xyfqaeLeBLec","outputId":"0c84f561-4d7c-4741-d2d0-98229123cb71"},"outputs":[{"output_type":"stream","name":"stdout","text":["Using device: cuda\n","torch.Size([3, 401])\n","11968\n"]}],"source":["# ────────────────────────────────────────────────────────────────────────────\n","# (A) 환경 및 TMM 파라미터 준비\n","# ────────────────────────────────────────────────────────────────────────────\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","print(f\"Using device: {device}\")\n","\n","# (1) 파장 정의 (380~780 nm, 5 nm 간격 → 81개)\n","WAVELENGTHS = np.arange(380, 781, 1)            # [380, 385, ..., 780]\n","NUM_WAVELENGTHS = len(WAVELENGTHS)             # 81\n","λ_tensor_global = torch.tensor(WAVELENGTHS, dtype=torch.float64).to(device) * 1e-9  # [m 단위]\n","\n","material_sequence = ['Ag', 'WO3', 'Ag']\n","\n","#    각 층(material_sequence)의 복소 n(λ) 배열을 numpy로부터 추출\n","n_list_np_arrays = [material_data[mat][1] for mat in material_sequence]  # 길이 3 리스트\n","\n","\n","#    numpy → torch로 변환 & device로 이동 (dtype=torch.cdouble)\n","n_list_torch = torch.stack([\n","    torch.from_numpy(arr).to(torch.complex64) for arr in n_list_np_arrays\n","], dim=0).to(device)\n","print(n_list_torch.shape)\n","\n","#    입사·출사 매질 굴절률 (예: 입사=SiO2, 출사=Air)\n","n_i_np = material_data['SiO2'][1]   # numpy complex\n","n_s_np = material_data['Air']       # numpy complex\n","\n","n_i_torch = torch.from_numpy(n_i_np).to(torch.complex64).to(device)\n","n_s_torch = torch.from_numpy(n_s_np).to(torch.complex64).to(device)\n","\n","# (4) 두께 그리드 (nm 단위)\n","d1_list_nm = np.arange(5, 41, 5)       # [5, 10, 15, 20, 25, 30]\n","d2_list_nm = np.arange(20, 951, 5)  # [150, 160, …, 1000]\n","d3_list_nm = np.arange(5, 41, 5)        # [5, 10, 15, 20, 25, 30]\n","\n","print(len(d1_list_nm)*len(d2_list_nm)*len(d3_list_nm))\n","# (5) 샘플 저장용 리스트\n","all_d_tilde = []    # [(tilde1, tilde2, tilde3), …]\n","all_T_target = []   # [array([T(λ), …, T(λ)]), …]"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1753061822973,"user":{"displayName":"이스타의행운","userId":"08935579543132628543"},"user_tz":-540},"id":"fHimXBvAcufD","outputId":"19de6007-e28a-4970-9103-08766a6dc9df"},"outputs":[{"output_type":"stream","name":"stdout","text":["Using device: cuda\n"]}],"source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","from torch.utils.data import Dataset, DataLoader\n","import numpy as np\n","import os\n","\n","# ────────────────────────────────────────────────────────────────────────────\n","# (A) 환경 및 TMM 파라미터 준비\n","# ────────────────────────────────────────────────────────────────────────────\n","\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","print(f\"Using device: {device}\")\n","\n","# (1) 파장 정의 (380~780 nm, 1 nm 간격 → 401개)\n","WAVELENGTHS = np.arange(380, 781, 1)            # [380, 381, ..., 780] (nm)\n","NUM_WAVELENGTHS = len(WAVELENGTHS)              # 401\n","# 반드시 “nm → m 단위 torch.Tensor” 형태로 넘겨야 함\n","λ_tensor_global = (\n","    torch.tensor(WAVELENGTHS, dtype=torch.float64)\n","    .to(device)\n","    * 1e-9\n",")  # [m 단위], shape: (401,)\n","\n","# (2) material_data에서 복소 굴절률 로드\n","#    material_sequence: 3층 구조 예시\n","material_sequence = ['Ag', 'WO3', 'Ag']\n","n_list_np_arrays = [material_data[mat][1] for mat in material_sequence]  # [ (401,), (401,), (401,) ]\n","\n","#    numpy → torch로 변환 & device로 이동 (dtype=torch.complex128)\n","n_list_torch = torch.stack([\n","    torch.from_numpy(arr).to(torch.complex128) for arr in n_list_np_arrays\n","], dim=0).to(device)  # shape: (3, 401), dtype: complex128\n","\n","#    입사·출사 매질 굴절률 (예: 입사=SiO2, 출사=Air)\n","n_i_np = material_data['SiO2'][1]   # numpy complex128 shape: (401,)\n","n_s_np = material_data['Air']       # numpy complex128 shape: (401,)\n","\n","n_i_torch = torch.from_numpy(n_i_np).to(torch.complex128).to(device)  # shape: (401,)\n","n_s_torch = torch.from_numpy(n_s_np).to(torch.complex128).to(device)  # shape: (401,)"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"hnFyPOo-v2xi","executionInfo":{"status":"ok","timestamp":1753061823183,"user_tz":-540,"elapsed":190,"user":{"displayName":"이스타의행운","userId":"08935579543132628543"}}},"outputs":[],"source":["# ────────────────────────────────────────────────────────────────────────────\n","# (A-1) TMMNetwork 정의 (클래스 이름, dtype 통일, calculate() 추가)\n","# ────────────────────────────────────────────────────────────────────────────\n","class TMMNetwork(nn.Module):\n","    def __init__(self, n_list_input, n_i_input, n_s_input, wavelengths_m_tensor):\n","        super().__init__()\n","        dtype_complex = torch.complex128\n","        dtype_float = torch.float64\n","\n","        # 기준길이 L0 (이제 tilde는 안 쓰므로 없어도 무방하지만 유지 가능)\n","        n_list_real = n_list_input.real\n","        n_list_imag = -torch.abs(n_list_input.imag)\n","        self.register_buffer('n_list', torch.complex(n_list_real, n_list_imag))\n","        self.register_buffer('n_i', n_i_input.to(dtype_complex))\n","        self.register_buffer('n_s', n_s_input.to(dtype_complex))\n","\n","        # 파수 k0\n","        k0 = 2 * torch.pi / torch.clamp(wavelengths_m_tensor, min=1e-20)\n","        self.register_buffer('k0', k0)  # 이제 k0_tilde 아님\n","\n","        self.num_layers = self.n_list.shape[0]\n","        self.num_wavelengths = wavelengths_m_tensor.shape[0]\n","\n","    def forward(self, thicknesses_nm):\n","        device = thicknesses_nm.device\n","        dtype_complex = torch.complex128\n","        imag_unit = torch.tensor(1j, dtype=dtype_complex, device=device)\n","\n","        if thicknesses_nm.ndim == 1:\n","            thicknesses_nm = thicknesses_nm.unsqueeze(0)  # (1, 3)\n","        B = thicknesses_nm.shape[0]  # batch size\n","\n","        # Convert to meters\n","        thicknesses_m = thicknesses_nm * 1e-9  # (B, 3)\n","\n","        # (B, 3, 401): broadcasting layer × wavelength\n","        delta = thicknesses_m[:, :, None] * self.k0[None, None, :] * self.n_list[None, :, :]\n","\n","        cosδ = torch.cos(delta)\n","        sinδ = torch.sin(delta)\n","\n","        # 초기 M_total: (B, 401, 2, 2)\n","        M_total = torch.eye(2, dtype=dtype_complex, device=device).repeat(B, self.num_wavelengths, 1, 1)\n","\n","        for j in range(self.num_layers):\n","            Yj = self.n_list[j] * 2.654e-3  # (401,)\n","\n","            sin_j = sinδ[:, j, :]\n","            cos_j = cosδ[:, j, :]\n","\n","            m11 = cos_j\n","            m12 = imag_unit * sin_j / Yj[None, :]\n","            m21 = imag_unit * Yj[None, :] * sin_j\n","            m22 = cos_j\n","\n","            Mj = torch.stack([\n","                torch.stack([m11, m12], dim=-1),\n","                torch.stack([m21, m22], dim=-1)\n","            ], dim=-2)  # shape: (B, 401, 2, 2)\n","\n","            M_total = torch.matmul(M_total, Mj)\n","\n","        Y_in = self.n_i * 2.654e-3\n","        Y_out = self.n_s * 2.654e-3\n","\n","        B_ = M_total[:, :, 0, 0] + M_total[:, :, 0, 1] * Y_out\n","        C_ = M_total[:, :, 1, 0] + M_total[:, :, 1, 1] * Y_out\n","        denom = Y_in * B_ + C_\n","        t1 = (2 * Y_in) / denom  # (B, 401)\n","\n","        T = (torch.real(self.n_s) / torch.real(self.n_i)) * torch.abs(t1) ** 2\n","        return T.to(torch.float64)  # (B, 401)\n","# ────────────────────────────────────────────────────────────────────────────\n","# (A-2) 단일 시험용 스펙트럼 계산 (디버깅 / 시각화)\n","# ────────────────────────────────────────────────────────────────────────────\n","model = TMMNetwork(n_list_torch, n_i_torch, n_s_torch, λ_tensor_global).to(device)"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"awPhXGk1CHwC","executionInfo":{"status":"ok","timestamp":1753061823185,"user_tz":-540,"elapsed":4,"user":{"displayName":"이스타의행운","userId":"08935579543132628543"}}},"outputs":[],"source":["import os\n","import random\n","import numpy as np\n","import torch\n","\n","# ------------------------------\n","# 시드 고정 (재현성 확보)\n","# ------------------------------\n","def seed_everything(seed=42):\n","    random.seed(seed)\n","    np.random.seed(seed)\n","    torch.manual_seed(seed)\n","    torch.cuda.manual_seed_all(seed)  # if using multi-GPU\n","    torch.backends.cudnn.deterministic = True\n","    torch.backends.cudnn.benchmark = False\n","\n","seed_everything(42)  # 시드 고정 실행"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16819,"status":"ok","timestamp":1753061840004,"user":{"displayName":"이스타의행운","userId":"08935579543132628543"},"user_tz":-540},"id":"_QB5wv5A3j8H","outputId":"a6472c4b-ebe3-41a8-9e92-660d8f8e0ec0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Generating (normalized_d → T_target) pairs ...\n","Total samples: 11968\n","Total: 11968, Train: 10771, Val: 598, Test: 599\n"]}],"source":["# @title\n","from torch.utils.data import random_split\n","all_d = []\n","all_T_target = []\n","\n","print(\"Generating (normalized_d → T_target) pairs ...\")\n","for d1 in d1_list_nm:\n","    for d2 in d2_list_nm:\n","        for d3 in d3_list_nm:\n","            # (a) [d1, d2, d3]\n","            d_nm_vec = torch.tensor([[d1, d2, d3]], dtype=torch.float64)  # shape: (1, 3)\n","            all_d.append(d_nm_vec.cpu().numpy())\n","            # (b) TMM forward\n","            T_spec = model(d_nm_vec.to(device))  # forward(nm 단위 두께)\n","            all_T_target.append(T_spec.detach().cpu().numpy())\n","# NumPy 배열로 변환\n","all_d = np.array(all_d, dtype=np.float64)   # shape: (3096, 3)\n","#ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ두께표준화ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n","THICKNESS_MIN = torch.tensor(np.min(all_d, axis=0), dtype=torch.float64, device=device)\n","THICKNESS_MAX = torch.tensor(np.max(all_d, axis=0), dtype=torch.float64, device=device)\n","def standardize_thickness(d_nm_array):\n","    d_nm_array = torch.tensor(d_nm_array, dtype=torch.float64, device=THICKNESS_MIN.device) if not isinstance(d_nm_array, torch.Tensor) else d_nm_array.to(dtype=torch.float64, device=THICKNESS_MIN.device)\n","    return (d_nm_array - THICKNESS_MIN) / (THICKNESS_MAX - THICKNESS_MIN)\n","\n","def destandardize_thickness(d_norm_array):\n","    d_norm_array = d_norm_array.clone().to(dtype=torch.float64, device=THICKNESS_MIN.device)\n","    return d_norm_array * (THICKNESS_MAX - THICKNESS_MIN) + THICKNESS_MIN\n","\n","all_d_norm = standardize_thickness(all_d)  # shape: (3096, 3)\n","d_nm_check = destandardize_thickness(all_d_norm)\n","\n","\n","#ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ스펙트럼표준화ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n","all_T_target = np.array(all_T_target, dtype=np.float64) # shape: (3096, 401)\n","print(\"Total samples:\", all_d.shape[0])  # 3096\n","\n","SPECTRUM_MIN = torch.tensor(np.min(all_T_target, axis=0), dtype=torch.float64).to(device)\n","SPECTRUM_MAX = torch.tensor(np.max(all_T_target, axis=0), dtype=torch.float64).to(device)\n","def standardize_spectrum(T_array):\n","    T_tensor = torch.tensor(T_array, dtype=torch.float64).to(device)\n","    return (T_tensor - SPECTRUM_MIN) / (SPECTRUM_MAX - SPECTRUM_MIN)\n","\n","def destandardize_spectrum(T_std_array):\n","    return T_std_array * (SPECTRUM_MAX - SPECTRUM_MIN) + SPECTRUM_MIN\n","\n","# destandardize_spectrum의 결과(GPU 텐서)를 .cpu().numpy()로 변환하여 비교합니다.\n","all_T_target_std = standardize_spectrum(all_T_target)\n","restored_T = destandardize_spectrum(all_T_target_std)\n","assert np.allclose(restored_T.cpu().numpy(), all_T_target, atol=1e-5)\n","\n","# ────────────────────────────────────────────────────────────────────────────\n","# (B) Dataset / DataLoader 구축\n","# ────────────────────────────────────────────────────────────────────────────\n","class BiTMMNormalizedDataset(Dataset):\n","    def __init__(self, d_norm_array, T_array):\n","        self.d_norm = d_norm_array.clone().to(dtype=torch.float64)\n","        self.T_spec = T_array.clone().detach().to(dtype=torch.float64) if isinstance(T_array, torch.Tensor) else torch.tensor(T_array, dtype=torch.float64)\n","\n","    def __len__(self):\n","        return self.d_norm.shape[0]\n","\n","    def __getitem__(self, idx):\n","        return {\n","            'd_norm': self.d_norm[idx],       # shape: (3,)1\n","            'T_target': self.T_spec[idx]      # shape: (401,)\n","        }\n","\n","batch_size = 32\n","\n","\n","# 시드 고정\n","seed = 42\n","g = torch.Generator().manual_seed(seed)\n","\n","# Dataset 생성\n","dataset = BiTMMNormalizedDataset(all_d_norm, all_T_target_std)\n","\n","# 전체 길이 및 split 비율\n","total_size = len(dataset)\n","train_size = int(0.9 * total_size)\n","val_size   = int(0.05 * total_size)\n","test_size  = total_size - train_size - val_size  # 나머지\n","\n","print(f\"Total: {total_size}, Train: {train_size}, Val: {val_size}, Test: {test_size}\")\n","\n","# Dataset 분할\n","train_dataset, val_dataset, test_dataset = random_split(\n","    dataset, [train_size, val_size, test_size], generator=g  # g로 통일\n",")\n","\n","# DataLoader 정의\n","train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True,  num_workers=0, generator=g)\n","val_loader   = DataLoader(val_dataset,   batch_size=batch_size, shuffle=False, num_workers=0)\n","test_loader  = DataLoader(test_dataset,  batch_size=batch_size, shuffle=False, num_workers=0)\n"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7468,"status":"ok","timestamp":1753061852687,"user":{"displayName":"이스타의행운","userId":"08935579543132628543"},"user_tz":-540},"id":"IgVtOnwO4XYP","outputId":"6b5e4fa6-4f9c-4ac9-9ce5-4866421f7d00"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting optuna\n","  Downloading optuna-4.4.0-py3-none-any.whl.metadata (17 kB)\n","Collecting alembic>=1.5.0 (from optuna)\n","  Downloading alembic-1.16.4-py3-none-any.whl.metadata (7.3 kB)\n","Collecting colorlog (from optuna)\n","  Downloading colorlog-6.9.0-py3-none-any.whl.metadata (10 kB)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from optuna) (2.0.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from optuna) (25.0)\n","Requirement already satisfied: sqlalchemy>=1.4.2 in /usr/local/lib/python3.11/dist-packages (from optuna) (2.0.41)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from optuna) (4.67.1)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.11/dist-packages (from optuna) (6.0.2)\n","Requirement already satisfied: Mako in /usr/lib/python3/dist-packages (from alembic>=1.5.0->optuna) (1.1.3)\n","Requirement already satisfied: typing-extensions>=4.12 in /usr/local/lib/python3.11/dist-packages (from alembic>=1.5.0->optuna) (4.14.1)\n","Requirement already satisfied: greenlet>=1 in /usr/local/lib/python3.11/dist-packages (from sqlalchemy>=1.4.2->optuna) (3.2.3)\n","Downloading optuna-4.4.0-py3-none-any.whl (395 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m395.9/395.9 kB\u001b[0m \u001b[31m31.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading alembic-1.16.4-py3-none-any.whl (247 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m247.0/247.0 kB\u001b[0m \u001b[31m22.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading colorlog-6.9.0-py3-none-any.whl (11 kB)\n","Installing collected packages: colorlog, alembic, optuna\n","Successfully installed alembic-1.16.4 colorlog-6.9.0 optuna-4.4.0\n"]}],"source":["!pip install optuna\n","import optuna"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["9552502240fe4bb4b3a6bc988303cce4","62ac53b6aa884018a9f5dcca5316e736","d6a8770bacc14497973f4759273871ef","4872325922244707b1685430fe8a293c","08e2088511f349cdb9d183810ea628c4","e3205319cdd746459691347cc973b448","1cb837011565429cb4cfcf86b0d70ac1","551f2800e40846c1aef31a2f3d3a8125","61544c9d03be41088f8fafbcebbb5c31","bd2c496b87d44619834d39b3a323ef01","6f37e5b0c69a4d2a99307ee5b54e50be","5fc39b2688bd48d88923a1104eebb2c3","bb23b06cc2cb41eda309ca8ad748f238","6c9e56671cf9443e97e72ca6275881dc","402ec366d56c47aca6723c809ee78877","33f7b112927140e097b1910abfd87e29","8a45b670ec694b10afe0ef7ab79eae1e","717b4f33c1144f7ab8ecf5bfe077ace6","ac558832aa1a4d0dba1f23d16a5b2e49","76bf3f7cdf9a4dc3b06bc8fa794d1e64","0bc6e1b578eb4cc0ae002fc64b02d04d","987c73a2430747a3895e14a4c23ec520","722056d659254629829d2a559faa91d2","16e2e3f0151f499b813ecff2aae0c4b3","793875651e1e444f9b2dcfaee591e2eb","f9adb6bd6e5b41239e452ef5725036f4","f480fd6303cd47dd84ec1a557c18ad17","e01098ffd03e4958b2141b52e92c3b80","76282f7648da4c9988424cb07f70b5f1","630619495b6842fabb245ff25273ebb7","e07f080d76a540cbb090a2ab11b72e0d","fa9c631253e944308cbb51ffee29eca6","e63f5d3c021b499ea035380d7c672d7c","5a1c00c5909e493e99824e449161855a","2109e5db924f46018b391ce47414264c","c4e3d268bab641ddbad8ab158687077d","0c8c349a7ffb449c9923476f3c725a11","2ee49ec3941a45d8bae6e931f47c43b5","f3a983e56f404af7b548b7302a52f00f","36ff59f7cff64d20958c6d8580cb58c2","bde5be029e274e18998a7e8a5ac27825","f7f8055f070a45c38d860dd0141cbe41","e1a12a911c85492e94611e4c68fa2443","152dad54243b4581bbc168f34099e1a8","fe093b294ccc4d7f8db66198982bbe6d","85e2fbe89f22451797f601a5ae653c1c","469a83682e7a41bcb837a13f3cd3e385","d9799a0b588c48e99764fb950784d6a0","1b7387dfd6294aa49ee3e79a65cc13e6","9cfd9246e6ec4415abd4a1d477eb0fcd","a6e7cbd9b3ce4cc685e6df6ea68de321","99a801d221c141e7919845a8aeb43777","ce04d758408342fda4285ff9d29f7abc","f7b2e27c744e4249bb08265e7dd11988","c0be7e228a4748f085fb7478dc744f6c"]},"id":"AvW_ilym33ef","outputId":"b9980a3d-8f7d-48ea-e959-358dde1828c8"},"outputs":[{"output_type":"stream","name":"stderr","text":["[I 2025-07-21 01:37:34,213] A new study created in memory with name: no-name-95fedbc7-6b69-4ca3-a62a-7d95a3ddb54c\n"]},{"output_type":"stream","name":"stdout","text":["\n","============================================================\n","▶ Trial 0 시작 (적용된 하이퍼파라미터):\n","    lr: 4.709342990753526e-05\n","    alpha: 0.19328294024559517\n","    n_layers: 5\n","    n_units: 512\n","    batch_size: 64\n","    beta: 17\n","    num_epochs: 502\n","============================================================\n"]},{"output_type":"display_data","data":{"text/plain":["Training Progress:   0%|          | 0/502 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9552502240fe4bb4b3a6bc988303cce4"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","============================================================\n","▶ Trial 1 시작 (적용된 하이퍼파라미터):\n","    lr: 9.644206509183142e-05\n","    alpha: 0.1780697727870196\n","    n_layers: 4\n","    n_units: 1024\n","    batch_size: 32\n","    beta: 16\n","    num_epochs: 514\n","============================================================\n"]},{"output_type":"display_data","data":{"text/plain":["Training Progress:   0%|          | 0/514 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5fc39b2688bd48d88923a1104eebb2c3"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","============================================================\n","▶ Trial 2 시작 (적용된 하이퍼파라미터):\n","    lr: 4.26459194214773e-05\n","    alpha: 0.12890979094383762\n","    n_layers: 4\n","    n_units: 512\n","    batch_size: 128\n","    beta: 11\n","    num_epochs: 506\n","============================================================\n"]},{"output_type":"display_data","data":{"text/plain":["Training Progress:   0%|          | 0/506 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"722056d659254629829d2a559faa91d2"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","============================================================\n","▶ Trial 3 시작 (적용된 하이퍼파라미터):\n","    lr: 9.403149345691192e-05\n","    alpha: 0.19529188922065532\n","    n_layers: 5\n","    n_units: 1024\n","    batch_size: 128\n","    beta: 10\n","    num_epochs: 591\n","============================================================\n"]},{"output_type":"display_data","data":{"text/plain":["Training Progress:   0%|          | 0/591 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5a1c00c5909e493e99824e449161855a"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","============================================================\n","▶ Trial 4 시작 (적용된 하이퍼파라미터):\n","    lr: 4.0966777846609044e-05\n","    alpha: 0.1582847521005322\n","    n_layers: 4\n","    n_units: 768\n","    batch_size: 32\n","    beta: 19\n","    num_epochs: 560\n","============================================================\n"]},{"output_type":"display_data","data":{"text/plain":["Training Progress:   0%|          | 0/560 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"fe093b294ccc4d7f8db66198982bbe6d"}},"metadata":{}}],"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","import os\n","import optuna\n","from torch.utils.data import random_split, DataLoader\n","from tqdm.auto import tqdm\n","\n","# =================================================================================\n","# (A) 드라이브 마운트, material_files, material_data, WAVELENGTHS,\n","# TMMNetwork, Dataset 클래스 정의, 표준화/역표준화 함수 등 모든 사전 준비 코드\n","#\n","# 아래 코드 실행 전에 다음 변수들이 미리 정의되어 있어야 합니다:\n","# dataset, train_size, val_size, test_size, device, model(ForwardNet),\n","# NUM_WAVELENGTHS, material_sequence, destandardize_thickness, destandardize_spectrum\n","# =================================================================================\n","\n","def objective(trial):\n","    \"\"\"Optuna가 한 세트의 하이퍼파라미터를 시험(trial)하는 함수\"\"\"\n","    def seed_everything(seed: int = 42):\n","        import random, numpy as np\n","        random.seed(seed)\n","        np.random.seed(seed)\n","        torch.manual_seed(seed)\n","        torch.cuda.manual_seed_all(seed)\n","        torch.backends.cudnn.deterministic = True\n","        torch.backends.cudnn.benchmark = False\n","\n","    SEED = 42\n","    seed_everything(SEED)\n","    # --- 1. 탐색할 하이퍼파라미터 정의 ---\n","    lr = trial.suggest_float(\"lr\", 3e-5, 1e-4, log=True)\n","    alpha = trial.suggest_float(\"alpha\", 0.1, 0.2, log=True)\n","    n_layers = trial.suggest_int(\"n_layers\", 4, 5)\n","    n_units = trial.suggest_categorical(\"n_units\", [512, 768, 1024])\n","    batch_size = trial.suggest_categorical(\"batch_size\", [32, 64, 128])\n","    beta = trial.suggest_int(\"beta\", 10, 20)\n","    num_epochs = trial.suggest_int(\"num_epochs\", 500, 600)\n","    current_params = {\n","        \"lr\": lr,\n","        \"alpha\": alpha,\n","        \"n_layers\": n_layers,\n","        \"n_units\": n_units,\n","        \"batch_size\": batch_size,\n","        \"beta\": beta,\n","        \"num_epochs\": num_epochs\n","    }\n","\n","    # 보기 좋게 출력합니다.\n","    print(\"\\n\" + \"=\"*60)\n","    print(f\"▶ Trial {trial.number} 시작 (적용된 하이퍼파라미터):\")\n","    for key, value in current_params.items():\n","        print(f\"    {key}: {value}\")\n","    print(\"=\"*60)\n","\n","    # --- 2. 데이터 분할 및 DataLoader 생성 ---\n","    g = torch.Generator().manual_seed(SEED)\n","    train_dataset, val_dataset, _ = random_split(\n","        dataset, [train_size, val_size, test_size], generator=g\n","    )\n","    train_loader = DataLoader(\n","        train_dataset, batch_size=batch_size, shuffle=True, num_workers=0, generator=g\n","    )\n","    val_loader = DataLoader(\n","        val_dataset, batch_size=batch_size, shuffle=False, num_workers=0\n","    )\n","\n","    # --- 3. InverseNet 정의 ---\n","    class InverseNet(nn.Module):\n","        def __init__(self, input_dim, output_dim, num_hidden_layers, units):\n","            super().__init__()\n","            layers = [nn.Linear(input_dim, units), nn.LeakyReLU()]\n","            for _ in range(num_hidden_layers):\n","                layers += [nn.Linear(units, units), nn.LeakyReLU()]\n","            layers += [nn.Linear(units, output_dim), nn.Sigmoid()]\n","            self.net = nn.Sequential(*layers)\n","\n","        def forward(self, x):\n","            return self.net(x)\n","\n","    num_layers_output = len(material_sequence)\n","    inverse_net = InverseNet(\n","        NUM_WAVELENGTHS, num_layers_output, n_layers, n_units\n","    ).to(device).to(torch.float64)\n","    optimizer = optim.Adam(inverse_net.parameters(), lr=lr)\n","\n","    epoch_pbar = tqdm(range(1, num_epochs + 1), desc=\"Training Progress\")\n","    # --- 4. 학습 및 검증 루프 ---\n","    for epoch in epoch_pbar:\n","        inverse_net.train()\n","        epoch_loss = 0.0\n","        for batch in train_loader:\n","            T_target = batch['T_target'].to(device)\n","            d_norm_true = batch['d_norm'].to(device)\n","\n","            optimizer.zero_grad()\n","            x = T_target.squeeze(1)\n","            d_norm_pred = inverse_net(x)\n","\n","            d_nm_pred = destandardize_thickness(d_norm_pred)\n","            # Tandem Network: InverseNet의 출력을 ForwardNet(model)에 전달\n","            T_pred_batch = model(d_nm_pred)\n","            T_target_destd = destandardize_spectrum(x)\n","\n","            loss_spectrum = F.mse_loss(T_pred_batch, T_target_destd)\n","            loss_thickness = F.mse_loss(d_norm_pred, d_norm_true.squeeze(1))\n","            loss = loss_spectrum + alpha * loss_thickness if epoch < beta else loss_spectrum\n","\n","            loss.backward()\n","            optimizer.step()\n","            epoch_loss += loss.item()\n","\n","        inverse_net.eval()\n","        val_loss_total = 0.0\n","        with torch.no_grad():\n","            for val_batch in val_loader:\n","                T_val = val_batch['T_target'].to(device)\n","                d_norm_val = val_batch['d_norm'].to(device)\n","\n","                x_val = T_val.squeeze(1).to(torch.float64)\n","                d_pred_val = inverse_net(x_val)\n","                d_nm_val_pred = destandardize_thickness(d_pred_val)\n","                T_val_pred = model(d_nm_val_pred)\n","                T_val_destd = destandardize_spectrum(x_val)\n","\n","                loss_spectrum_v = F.mse_loss(T_val_pred, T_val_destd)\n","                loss_thickness_v = F.mse_loss(d_pred_val, d_norm_val.squeeze(1))\n","                val_loss = (loss_spectrum_v + alpha * loss_thickness_v) if epoch < beta else loss_spectrum_v\n","                val_loss_total += val_loss.item()\n","\n","        avg_train_loss = epoch_loss / len(train_loader)\n","        avg_val_loss = val_loss_total / len(val_loader)\n","        epoch_pbar.set_postfix(train_loss=f\"{avg_train_loss:.6f}\", val_loss=f\"{avg_val_loss:.6f}\")\n","\n","        trial.report(avg_val_loss, epoch)\n","        if trial.should_prune():\n","            raise optuna.exceptions.TrialPruned()\n","\n","    return avg_val_loss\n","\n","if __name__ == \"__main__\":\n","    study = optuna.create_study(\n","        direction=\"minimize\",\n","        pruner=optuna.pruners.MedianPruner(n_warmup_steps=3),\n","        sampler=optuna.samplers.TPESampler(seed=42)\n","    )\n","    optuna.logging.set_verbosity(optuna.logging.WARNING)\n","    study.optimize(objective, n_trials=100, n_jobs=1)\n","\n","    print(\"\\n\\n========================================================\")\n","    print(\"                      탐색 완료!                      \")\n","    print(\"========================================================\")\n","    print(\"최적의 Trial 번호:\", study.best_trial.number)\n","    print(\"최적의 Loss (Value):\", study.best_trial.value)\n","    print(\"\\n최적의 하이퍼파라미터 (Best Params):\")\n","    for key, value in study.best_trial.params.items():\n","        print(f\"    {key}: {value}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":263},"executionInfo":{"elapsed":4652,"status":"error","timestamp":1753011698351,"user":{"displayName":"이스타의행운","userId":"08935579543132628543"},"user_tz":-540},"id":"LSaN4xqLJvjt","outputId":"c69966df-820f-49a8-aa1d-b46a53ee5de3"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","[INFO] Start training InverseNet (best params)\n","\n"]},{"ename":"NameError","evalue":"name 'trial' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-13-2246638820.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     84\u001b[0m \u001b[0mbest_val_loss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'inf'\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# 가장 큰 값으로 초기화\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 86\u001b[0;31m \u001b[0mepoch_pbar\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mNUM_EPOCHS\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdesc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34mf\"Trial {trial.number}\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleave\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     87\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mepoch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mNUM_EPOCHS\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     88\u001b[0m     \u001b[0;31m# ---- train ----\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'trial' is not defined"]}],"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","from torch.utils.data import random_split, DataLoader\n","import os\n","\n","\"\"\"\n","TRAIN SCRIPT (best hyper-parameters from Optuna)\n","────────────────────────────────────────────────\n","이 스크립트는 Optuna 탐색 결과 중 가장 우수했던 Trial-3의 파라미터로 InverseNet을 학습합니다.\n","전제 조건\n","──────────\n","(A)-섹션 준비 코드(드라이브 마운트, material_files, material_data, WAVELENGTHS, TMMNetwork,\n","    Dataset 정의, 표준화/역표준화 함수, dataset / train_size / val_size / test_size, device,\n","    model(material_sequence 포함) 변수)가 *이미* 메모리에 로드되어 있어야 합니다.\n","\n","사용 전 확인\n","────────────\n","- forward 모델 `model` 은 학습되지 않지만, autograd 흐름에는 포함되어야 합니다.\n","- 결과 가중치는 `inverse_best.pth` 로 저장됩니다.\n","- 필요한 경우 `SAVE_DIR` 를 변경하세요.\n","\"\"\"\n","\n","# ░░ 0. Seed 고정 함수 ░░\n","def seed_everything(seed: int = 42):\n","    import random, numpy as np\n","    random.seed(seed)\n","    np.random.seed(seed)\n","    torch.manual_seed(seed)\n","    torch.cuda.manual_seed_all(seed)\n","    torch.backends.cudnn.deterministic = True\n","    torch.backends.cudnn.benchmark = False\n","\n","# ░░ 1. 고정 하이퍼파라미터 ░░\n","SEED = 42\n","LR = 6.639623079859457e-05\n","ALPHA = 0.13940346079873228\n","N_LAYERS = 4\n","N_UNITS = 768\n","BATCH_SIZE = 32\n","BETA = 14\n","NUM_EPOCHS = 600\n","SAVE_DIR = \"./checkpoints\"\n","SAVE_PATH = os.path.join(SAVE_DIR, \"inverse_best.pth\")\n","\n","os.makedirs(SAVE_DIR, exist_ok=True)\n","seed_everything(SEED)\n","\n","\n","g = torch.Generator().manual_seed(SEED)\n","\n","# ░░ 2. DataLoader ░░\n","train_dataset, val_dataset, _ = random_split(\n","    dataset, [train_size, val_size, test_size], generator=g\n",")\n","train_loader = DataLoader(\n","    train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=0, generator=g\n",")\n","val_loader = DataLoader(\n","    val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=0\n",")\n","\n","# ░░ 3. InverseNet 정의 ░░\n","class InverseNet(nn.Module):\n","    def __init__(self, input_dim: int, output_dim: int, num_hidden_layers: int, units: int):\n","        super().__init__()\n","        layers = [nn.Linear(input_dim, units), nn.LeakyReLU()]\n","        for _ in range(num_hidden_layers):\n","            layers += [nn.Linear(units, units), nn.LeakyReLU()]\n","        layers += [nn.Linear(units, output_dim), nn.Sigmoid()]\n","        self.net = nn.Sequential(*layers)\n","\n","    def forward(self, x):\n","        return self.net(x)\n","\n","NUM_LAYERS_OUTPUT = len(material_sequence)\n","inverse_net = InverseNet(\n","    NUM_WAVELENGTHS, NUM_LAYERS_OUTPUT, N_LAYERS, N_UNITS\n",").to(device).to(torch.float64)\n","optimizer = optim.Adam(inverse_net.parameters(), lr=LR)\n","\n","# ░░ 4. 학습 루프 ░░\n","print(\"\\n[INFO] Start training InverseNet (best params)\\n\")\n","best_val_loss = float('inf')  # 가장 큰 값으로 초기화\n","\n","\n","for epoch in range(1, NUM_EPOCHS + 1):\n","    # ---- train ----\n","    inverse_net.train()\n","    epoch_loss = 0.0\n","    for batch in train_loader:\n","        T_target = batch['T_target'].to(device)\n","        d_norm_true = batch['d_norm'].to(device)\n","\n","        optimizer.zero_grad()\n","        x = T_target.squeeze(1)\n","        d_norm_pred = inverse_net(x)\n","\n","        d_nm_pred = destandardize_thickness(d_norm_pred)\n","        T_pred_batch = model(d_nm_pred)  # ⬅️ 수정됨: no torch.no_grad()\n","        T_target_destd = destandardize_spectrum(x)\n","\n","        loss_spectrum = F.mse_loss(T_pred_batch, T_target_destd)\n","        loss_thickness = F.mse_loss(d_norm_pred, d_norm_true.squeeze(1))\n","        loss = loss_spectrum + ALPHA * loss_thickness if epoch <= BETA else loss_spectrum\n","\n","        loss.backward()\n","        optimizer.step()\n","        epoch_loss += loss.item()\n","\n","    # ---- validation ----\n","    inverse_net.eval()\n","    val_loss_total = 0.0\n","    with torch.no_grad():\n","        for val_batch in val_loader:\n","            T_val = val_batch['T_target'].to(device)\n","            d_norm_val = val_batch['d_norm'].to(device)\n","\n","            x_val = T_val.squeeze(1).to(torch.float64)\n","            d_pred_val = inverse_net(x_val)\n","            d_nm_val_pred = destandardize_thickness(d_pred_val)\n","            T_val_pred = model(d_nm_val_pred)\n","            T_val_destd = destandardize_spectrum(x_val)\n","\n","            loss_spectrum_v = F.mse_loss(T_val_pred, T_val_destd)\n","            loss_thickness_v = F.mse_loss(d_pred_val, d_norm_val.squeeze(1))\n","            val_loss = (loss_spectrum_v + ALPHA * loss_thickness_v) if epoch <= BETA else loss_spectrum_v\n","            val_loss_total += val_loss.item()\n","\n","    avg_train_loss = epoch_loss / len(train_loader)\n","    avg_val_loss = val_loss_total / len(val_loader)\n","    if epoch % 1 == 0 or epoch == 1:\n","        print(f\"Epoch[{epoch}/{NUM_EPOCHS}]  train: {avg_train_loss:.6f}  val: {avg_val_loss:.6f}\")\n","\n","\n","    if avg_val_loss < best_val_loss:\n","        best_val_loss = avg_val_loss\n","        torch.save(inverse_net.state_dict(), SAVE_PATH)\n","        #print(f\"✅ Best model updated at epoch {epoch} with val loss: {avg_val_loss:.6f}\")"]},{"cell_type":"markdown","metadata":{"id":"oAlTouN6Li4V"},"source":[]},{"cell_type":"markdown","metadata":{"id":"lfh0wgyHpLKu"},"source":["# **OPTUNA**"]},{"cell_type":"markdown","metadata":{"id":"ie-ly1QN0pFw"},"source":["# **스펙트럼 저장 코드**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"executionInfo":{"elapsed":419,"status":"ok","timestamp":1752570962863,"user":{"displayName":"이스타의행운","userId":"08935579543132628543"},"user_tz":-540},"id":"LT4ND1s949_m","outputId":"f648ccfb-f910-42f3-c10c-6476f013f378"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 800x500 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["def lorentzian(x, x0, gamma):\n","    return 1 / (1 + ((x - x0) / gamma)**2)\n","\n","\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","x_dense = np.arange(380, 781, 1)  # 조밀한 파장 (nm)\n","sigma0 ,sigma1, sigma2, sigma3 = 20/2.355, 20/2.355, 20/2.355, 20/2.355\n","#sigma0 ,sigma1, sigma2, sigma3 = 8.7/2.355, 9.02/2.355, 9.22/2.355, 10/2.355\n","mu0, mu1, mu2, mu3 = 417 ,468, 538, 645  # 각 Gaussian 피크의 중심\n","G0 = np.exp(-((x_dense - mu0)**2) / (2 * sigma0**2))\n","G1 = np.exp(-((x_dense - mu1)**2) / (2 * sigma1**2))\n","G2 = np.exp(-((x_dense - mu2)**2) / (2 * sigma2**2))\n","G3 = np.exp(-((x_dense - mu3)**2) / (2 * sigma3**2))\n","\n","#base = 0.05 * np.exp(-((x_dense - 550)**2) / (2 * (150**2)))  # 더 넓게 퍼진 base\n","#base = 0.08 * np.exp(-((x_dense - 550)**2) / (2 * (220**2)))  # 더 넓고 높은 base\n","base = 0.01 * np.exp(-((x_dense - 530)**2) / (2 * (120**2)))\n","# 예시: 전체 영역을 덮는 Lorentzian tail\n","#tail = 0.03 * lorentzian(x_dense, 550, 150)\n","y_dense = base + 0.85*G0 + 0.85*G1 + 0.7*G2 + 0.7*G3\n","\n","y_dense[y_dense <= 1e-7] = 0.0\n","x_interp = np.arange(380, 781, 1) # TMM 계산에 사용할 파장 포인트 (이전 코드와 동일하게)\n","y_interp_np = np.interp(x_interp, x_dense, y_dense)  # 보간된 스펙트럼 값 (NumPy 배열)\n","y_interp_np = y_interp_np\n","target_T_spectrum1 = torch.from_numpy(y_interp_np).float()\n","plt.figure(figsize=(8, 5))\n","plt.plot(x_interp, y_interp_np, 'r--', alpha=0.7, label=f'Interpolated Target ({len(x_interp)} points)')\n","plt.xlabel('Wavelength (nm)')\n","plt.ylabel('Transmittance')\n","plt.title('Target Transmittance Spectrum')\n","plt.legend() # 범례 표시\n","plt.grid(True)\n","plt.ylim(0, 1) # y축 범위 약간 여유있게\n","plt.tight_layout()\n","plt.show()\n","T_pred_np = target_T_spectrum1.cpu().numpy()  # ← 이제 진짜 NumPy 배열"]},{"cell_type":"code","execution_count":null,"metadata":{"cellView":"form","id":"1OsNgtokLuFN"},"outputs":[],"source":["# @title\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","# 1. 문자열 → 리스트로 변환\n","data_str = \"\"\"\n","1.528028916177503E-11\n","5.61054151374814E-11\n","1.988535038092727E-10\n","6.80325853822446E-10\n","2.2467562747997605E-9\n","7.162262125688912E-9\n","2.2039397589185163E-8\n","6.546429392117577E-8\n","1.8770010549103766E-7\n","5.194931262844472E-7\n","1.3878750054902266E-6\n","3.5791192102437653E-6\n","8.909580028031092E-6\n","2.1408861012022516E-5\n","4.965753443809923E-5\n","1.1118136518890554E-4\n","2.402891231112226E-4\n","5.01292818377575E-4\n","0.0010094948631818581\n","0.0019623298224198302\n","0.0036820964041512283\n","0.006669197305378871\n","0.01166023322843746\n","0.019678689294342248\n","0.032058290527068614\n","0.0504126830762448\n","0.0765234469276175\n","0.11212552676794735\n","0.15858778332408718\n","0.2165161127511856\n","0.28534217945928936\n","0.3629919442706172\n","0.44574169494810106\n","0.5283537491341816\n","0.6045351910517439\n","0.6676881071642276\n","0.7118376498021289\n","0.7325605523020756\n","0.7277150602685771\n","0.6978056110815313\n","0.6458963226627079\n","0.5770938243192356\n","0.49772024006603566\n","0.4143615390803295\n","0.33298819261888585\n","0.25830540510465266\n","0.19341645703785543\n","0.13980047480385194\n","0.0975392116486622\n","0.06569094095919252\n","0.04270594535479377\n","0.02679978270310958\n","0.016234794829217157\n","0.009494691840655139\n","0.005362955285955552\n","0.002929936757152125\n","0.0015569269119318566\n","8.21603912881098E-4\n","4.6208753268625223E-4\n","3.294391677927974E-4\n","3.5263413243705595E-4\n","5.163440494447267E-4\n","8.500527816784008E-4\n","0.0014264802438038228\n","0.0023673623942296325\n","0.0038548261292911793\n","0.006146583604432572\n","0.009592804373840488\n","0.014651804554576441\n","0.02190074418294058\n","0.03203658336135423\n","0.04586194536328751\n","0.0642506571524095\n","0.08808895683884613\n","0.1181909287073518\n","0.15519066962380332\n","0.19941868689295922\n","0.25077537050909793\n","0.3086190233101019\n","0.3716886397493118\n","0.438081250261055\n","0.5052994523331863\n","0.5703766950622188\n","0.6300768171514429\n","0.6811519622685586\n","0.7206316076689042\n","0.746107464324275\n","0.7559764142832242\n","0.7496074441129247\n","0.7274084112158354\n","0.6907828228286079\n","0.6419829945042026\n","0.5838809445319225\n","0.5196894050212869\n","0.4526705148056586\n","0.3858685070270523\n","0.32189575210124977\n","0.26279066848837096\n","0.20995364415495799\n","0.16415559051862963\n","0.12560494037911937\n","0.09405384378110164\n","0.06892315660841351\n","0.049427944830904416\n","0.03468955513019691\n","0.02382559146521198\n","0.01601428061736472\n","0.0105339186781695\n","0.006780961388859976\n","0.004271804461452809\n","0.00263360259691697\n","0.0015889414776345473\n","9.381760591743983E-4\n","5.421002130289487E-4\n","3.0654456226085675E-4\n","1.696393388986233E-4\n","9.187112769908475E-5\n","4.869163861421221E-5\n","2.5256372932512796E-5\n","1.2824169026954496E-5\n","6.382250712495612E-6\n","3.134173569257794E-6\n","1.5720544699703161E-6\n","9.339301850893082E-7\n","9.157684147472464E-7\n","1.5660264575266926E-6\n","3.343769490725952E-6\n","7.377437217416912E-6\n","1.60308155502912E-5\n","3.3977136862584434E-5\n","7.011181329369878E-5\n","1.4080374469211426E-4\n","2.751858341252241E-4\n","5.233847493133543E-4\n","9.687195397819355E-4\n","0.0017448449635458847\n","0.0030584217535320184\n","0.00521698563424827\n","0.008660114677096875\n","0.013989731526029739\n","0.02199261401773766\n","0.033645428146196865\n","0.05009068849261112\n","0.0725720979203075\n","0.10232083830193052\n","0.1403913131533355\n","0.18745547000592377\n","0.24357781718668942\n","0.30800593539596266\n","0.3790200389307427\n","0.4538862151172095\n","0.5289486940051692\n","0.5998764879701738\n","0.6620516406176069\n","0.7110557078066849\n","0.7431853202888535\n","0.7559139382797615\n","0.7482200106425618\n","0.7207223988457762\n","0.6755981548890754\n","0.6162978109027135\n","0.5471098456877713\n","0.47265055311544985\n","0.397363109498726\n","0.32509976491512865\n","0.2588376810675515\n","0.20054880572563674\n","0.15121483321090354\n","0.11095591121414962\n","0.07922973965895257\n","0.0550563921075243\n","0.03723136874990695\n","0.024501461572715787\n","0.015691220163442255\n","0.009779196551988984\n","0.005931047047855342\n","0.0035005904041713544\n","0.0020106337200259004\n","0.00112384485182024\n","6.113099914541093E-4\n","3.235924369294185E-4\n","1.666928477595492E-4\n","8.356363134549433E-5\n","4.076611992212594E-5\n","1.935366350638173E-5\n","8.941465989826116E-6\n","4.020092138307945E-6\n","1.7589156776906842E-6\n","7.489205847701637E-7\n","3.103189166777946E-7\n","1.2513029491573335E-7\n","4.910191394691186E-8\n","1.8750640595161667E-8\n","6.968118727784561E-9\n","2.5199781985892506E-9\n","8.86870880117202E-10\n","3.037464567698537E-10\n","1.0124917259115896E-10\n","3.287551725568464E-11\n","1.0476925213652134E-11\n","3.4935276310724526E-12\n","1.788320427439396E-12\n","2.4954527661078955E-12\n","5.85884965622199E-12\n","1.482000840847238E-11\n","3.7231174833479033E-11\n","9.201172386027361E-11\n","2.2346348190993836E-10\n","5.332718155212962E-10\n","1.2504440393535622E-9\n","2.8810640550186305E-9\n","6.522506724009003E-9\n","1.450938882269182E-8\n","3.1714412039752203E-8\n","6.811412329787084E-8\n","1.4374430240138104E-7\n","2.980691777428087E-7\n","6.07318430604914E-7\n","1.2158746789417074E-6\n","2.391851038862964E-6\n","4.6233035132102825E-6\n","8.780993244367764E-6\n","1.6387316531025675E-5\n","3.005003647257919E-5\n","5.414459705427469E-5\n","9.586017338526847E-5\n","1.667609098211083E-4\n","2.850514557013572E-4\n","4.7876812880567454E-4\n","7.901329308431696E-4\n","0.001281291822974409\n","0.0020415917785408027\n","0.0031964117857568616\n","0.004917331647169879\n","0.007433087383271563\n","0.011040327037489528\n","0.016112673237656687\n","0.023106077347745623\n","0.03255800664233943\n","0.04507776276567449\n","0.06132532541407062\n","0.08197668095312183\n","0.10767472262566828\n","0.13896651108073188\n","0.17622986488289638\n","0.21959468475420854\n","0.2688667522022193\n","0.3234635435269579\n","0.38237240293545366\n","0.4441408324547111\n","0.506906459835814\n","0.5684704716745669\n","0.6264132818811986\n","0.6782455699131079\n","0.7215824062020649\n","0.7543238980272224\n","0.7748234567899365\n","0.7820249596106085\n","0.7755529080294093\n","0.7557448707874542\n","0.7236223091039844\n","0.6808032940981997\n","0.6293674975303323\n","0.5716891302108063\n","0.5102564702219903\n","0.44749693755374825\n","0.38562446271984413\n","0.3265216982266265\n","0.271664242371341\n","0.22208839825510984\n","0.17839892247332848\n","0.14080936614457515\n","0.10920532651030396\n","0.08322025868272954\n","0.0623142342775209\n","0.04584779204957104\n","0.03314534547992417\n","0.02354505103595103\n","0.01643424222499984\n","0.011271265838625184\n","0.007595715045333177\n","0.00502964804705186\n","0.0032724987549666495\n","0.002092157354891323\n","0.0013142626399747436\n","8.112280168623825E-4\n","4.920131173008195E-4\n","2.932131092205677E-4\n","1.716971342683862E-4\n","9.879061101280869E-5\n","5.5852325200490654E-5\n","3.102700146031611E-5\n","1.6936018359054445E-5\n","9.083553680155929E-6\n","4.7871079374220526E-6\n","2.4789262950370097E-6\n","1.261324902696654E-6\n","6.306135348339653E-7\n","3.0979368945951385E-7\n","1.4953911551042898E-7\n","7.092674179112902E-8\n","3.3055077038853866E-8\n","1.5136982160329708E-8\n","6.8110392983246555E-9\n","3.0113444493013925E-9\n","1.3082189772390848E-9\n","5.584360113977783E-10\n","2.3422829106557185E-10\n","9.65335426856574E-11\n","3.9092199018794675E-11\n","1.5555175634409708E-11\n","6.081807904332689E-12\n","2.336487381334447E-12\n","8.819970704221219E-13\n","3.271476514692056E-13\n","1.1923216580632648E-13\n","4.2698834453114666E-14\n","1.50248992782064E-14\n","5.194934545261448E-15\n","1.764905888583264E-15\n","5.891637067516489E-16\n","1.9325172590399678E-16\n","6.228503863074447E-17\n","1.97250020325941E-17\n","6.137949863884164E-18\n","1.876733379188793E-18\n","5.638385707860547E-19\n","1.664485232266922E-19\n","4.828120189183195E-20\n","1.3760973567353033E-20\n","3.853835830023423E-21\n","1.0604988972198594E-21\n","2.867478655871093E-22\n","7.618388717380971E-23\n","1.9888362354171177E-23\n","5.1016173544568354E-24\n","1.2858481972042286E-24\n","3.1845236669085565E-25\n","7.749473954308058E-26\n","1.852989364567646E-26\n","4.3535806273566045E-27\n","1.0050628458996515E-27\n","2.2798842960979604E-28\n","5.081657108891795E-29\n","1.1129377374601131E-29\n","2.3950210887855587E-30\n","5.0643157652293825E-31\n","1.0522166576673549E-31\n","2.1481397458931368E-32\n","4.309162285169303E-33\n","8.493684620715936E-34\n","1.6450245124391467E-34\n","3.130556727779541E-35\n","5.8538790314714594E-36\n","1.0755704721583434E-36\n","1.9418110128545155E-37\n","3.444673073866181E-38\n","6.004295009598955E-39\n","1.0283690461733254E-39\n","1.7306487423994287E-40\n","2.8618167937563003E-41\n","4.649943609986647E-42\n","7.423804150739408E-43\n","1.1646040273323028E-43\n","1.7951594543722478E-44\n","2.7189469578763646E-45\n","4.0464241270774846E-46\n","5.917183387563513E-47\n","8.502205909555456E-48\n","1.2003866853425805E-48\n","1.6652662569945587E-49\n","2.269964975010205E-50\n","3.040378073557265E-51\n","4.001372555472573E-52\n","5.1744399097303655E-53\n","6.574922957272004E-54\n","8.209013128682498E-55\n","1.0070805160456582E-55\n","1.2139768328394704E-56\n","1.4379029197015987E-57\n","1.6734844984161404E-58\n","1.9137569621511315E-59\n","2.150427647675818E-60\n","2.374301397000594E-61\n","2.5758455726320986E-62\n","2.745849682453941E-63\n","2.876117710833899E-64\n","2.9601213528722317E-65\n","2.9935418677626175E-66\n","2.974637982238787E-67\n","2.9043962210480754E-68\n","2.7864455993046896E-69\n","2.6267469445630216E-70\n","2.433093869626401E-71\n","2.2144835309448554E-72\n","1.9804277663594628E-73\n","1.7402775596754934E-74\n","1.5026263320893187E-75\n","1.2748422019300255E-76\n","1.0627590941285745E-77\n","8.705349058404756E-79\n","\"\"\"  # ← 위 숫자 전체를 여기에 그대로 붙여넣기 (생략된 부분 포함)\n","\n","# 2. 문자열 → 리스트 → NumPy 배열\n","data_list = [float(x) for x in data_str.strip().splitlines()]\n","T_pred_np = np.array(data_list)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"executionInfo":{"elapsed":444,"status":"ok","timestamp":1752570785492,"user":{"displayName":"이스타의행운","userId":"08935579543132628543"},"user_tz":-540},"id":"c9Xp3ElrBgaq","outputId":"61cc8a79-0e4f-49eb-ac62-94efe5030ddb"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1000x500 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","\n","# TMM 예측 스펙트럼 (x축은 λ_tensor_global * 1e9)\n","x_wavelengths = λ_tensor_global.cpu().numpy() * 1e9  # shape: (401,)\n","T_pred_np = T_pred.squeeze(0).cpu().numpy()  # shape: (401,)\n","# Target 스펙트럼 (보간된 Gaussian 기반)\n","x_target = x_interp  # 이미 401포인트 (380~780nm 간격 1nm)\n","y_target = y_interp_np\n","\n","plt.figure(figsize=(10, 5))\n","\n","# TMM 시뮬레이션 결과\n","plt.plot(x_wavelengths, T_pred_np, label='TMM Predicted Spectrum', linewidth=2)\n","\n","# 타겟 스펙트럼 (Gaussian 기반)\n","plt.plot(x_target, y_target, 'r--', alpha=0.7, label=f'Target Gaussian Spectrum ({len(x_target)} points)')\n","\n","# 공통 설정\n","plt.xlabel(\"Wavelength (nm)\")\n","plt.ylabel(\"Transmittance\")\n","plt.title(\"TMM vs. Gaussian Target Spectrum\")\n","plt.legend()\n","plt.grid(True)\n","plt.ylim(0, 1)\n","plt.tight_layout()\n","plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"yfUbpAta08jg"},"source":["# **모델 불러오가**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1561,"status":"ok","timestamp":1752566197171,"user":{"displayName":"이스타의행운","userId":"08935579543132628543"},"user_tz":-540},"id":"r-LujPwH0t6Y","outputId":"80eb4c35-b73e-4c58-94d1-01187b60cc97"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","✅ 모델 파라미터 로드 성공\n"]}],"source":["import torch\n","import torch.nn.functional as F\n","import matplotlib.pyplot as plt\n","import os\n","num_layers = len(material_sequence)  # 3\n","class InverseNet(nn.Module):\n","    def __init__(self, input_dim, output_dim):\n","        super().__init__()\n","        self.net = nn.Sequential(\n","            nn.Linear(input_dim, 768),  # net.0\n","            nn.LeakyReLU(),             # net.1\n","            nn.Linear(768, 768),        # net.2\n","            nn.LeakyReLU(),             # net.3\n","            nn.Linear(768, 768),        # net.4\n","            nn.LeakyReLU(),             # net.5\n","            nn.Linear(768, 768),        # net.6\n","            nn.LeakyReLU(),             # net.7\n","            nn.Linear(768, 768),        # net.8\n","            nn.LeakyReLU(),             # net.9\n","            nn.Linear(768, output_dim), # net.10 ✅\n","            nn.Sigmoid()                # net.11\n","        )\n","    def forward(self, x):\n","        return self.net(x)\n","\n","# ---------------------------\n","# 1. 저장된 모델 로드\n","# ---------------------------\n","inverse_net = InverseNet(input_dim=NUM_WAVELENGTHS, output_dim=len(material_sequence)).to(device)\n","inverse_net = inverse_net.to(torch.float64)\n","drive.mount('/content/drive')\n","# 모델 파라미터 로드\n","t_path = '/content/drive/MyDrive/Colab Notebooks/Bi-directional20250402'\n","Mod_name = \"inverse_best_New.pth\"\n","ckpt_path = t_path + \"/\" + Mod_name\n","\n","try:\n","    inverse_net.load_state_dict(torch.load(ckpt_path, map_location=device))\n","    print(\"✅ 모델 파라미터 로드 성공\")\n","except Exception as e:\n","    print(\"❌ 모델 로드 실패:\", e)"]},{"cell_type":"markdown","metadata":{"id":"K3hZyn-m1heP"},"source":["# **스펙트럼 정규화 , 두께 정규화**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13726,"status":"ok","timestamp":1752570980079,"user":{"displayName":"이스타의행운","userId":"08935579543132628543"},"user_tz":-540},"id":"HxdYe60m1gvI","outputId":"99e5131c-84b9-4eff-fe79-38d03c1ff514"},"outputs":[{"name":"stdout","output_type":"stream","text":["Generating (normalized_d → T_target) pairs ...\n","d1 = 28.91 nm, d2 = 741.35 nm, d3 = 17.18 nm\n"]}],"source":["# @title\n","from torch.utils.data import random_split\n","all_d = []\n","all_T_target = []\n","\n","print(\"Generating (normalized_d → T_target) pairs ...\")\n","for d1 in d1_list_nm:\n","    for d2 in d2_list_nm:\n","        for d3 in d3_list_nm:\n","            # (a) [d1, d2, d3]\n","            d_nm_vec = torch.tensor([[d1, d2, d3]], dtype=torch.float64)  # shape: (1, 3)\n","            all_d.append(d_nm_vec.cpu().numpy())\n","            # (b) TMM forward\n","            T_spec = model(d_nm_vec.to(device))  # forward(nm 단위 두께)\n","            all_T_target.append(T_spec.detach().cpu().numpy())\n","\n","#ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ두께표준화ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n","THICKNESS_MIN = torch.tensor(np.min(all_d, axis=0), dtype=torch.float64, device=device)\n","THICKNESS_MAX = torch.tensor(np.max(all_d, axis=0), dtype=torch.float64, device=device)\n","def standardize_thickness(d_nm_array):\n","    d_nm_array = torch.tensor(d_nm_array, dtype=torch.float64, device=THICKNESS_MIN.device) if not isinstance(d_nm_array, torch.Tensor) else d_nm_array.to(dtype=torch.float64, device=THICKNESS_MIN.device)\n","    return (d_nm_array - THICKNESS_MIN) / (THICKNESS_MAX - THICKNESS_MIN)\n","\n","def destandardize_thickness(d_norm_array):\n","    d_norm_array = d_norm_array.clone().to(dtype=torch.float64, device=THICKNESS_MIN.device)\n","    return d_norm_array * (THICKNESS_MAX - THICKNESS_MIN) + THICKNESS_MIN\n","#ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ스펙트럼표준화ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n","\n","SPECTRUM_MIN = torch.tensor(np.min(all_T_target, axis=0), dtype=torch.float64).to(device)\n","SPECTRUM_MAX = torch.tensor(np.max(all_T_target, axis=0), dtype=torch.float64).to(device)\n","def standardize_spectrum(T_array):\n","    T_tensor = torch.tensor(T_array, dtype=torch.float64).to(device)\n","    return (T_tensor - SPECTRUM_MIN) / (SPECTRUM_MAX - SPECTRUM_MIN)\n","\n","def destandardize_spectrum(T_std_array):\n","    return T_std_array * (SPECTRUM_MAX - SPECTRUM_MIN) + SPECTRUM_MIN\n","\n","\n","\n","# 1. numpy → tensor & 정규화\n","T_input_std = standardize_spectrum(T_pred_np)  # shape: (401,)\n","\n","# 2. 배치 차원 추가 (1, 401)\n","T_input_std = T_input_std.unsqueeze(0)\n","\n","# 3. 모델 예측\n","inverse_net.eval()\n","with torch.no_grad():\n","    pred_d_norm = inverse_net(T_input_std)  # shape: (1, 3)\n","    pred_d_nm = destandardize_thickness(pred_d_norm).cpu().numpy()  # shape: (1, 3)\n","    pred_d_nm = pred_d_nm.squeeze()  # shape: (3,)로 만듦\n","    d1, d2, d3 = pred_d_nm\n","print(f\"d1 = {d1:.2f} nm, d2 = {d2:.2f} nm, d3 = {d3:.2f} nm\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":248},"executionInfo":{"elapsed":1458,"status":"error","timestamp":1750823630659,"user":{"displayName":"이스타의행운","userId":"08935579543132628543"},"user_tz":-540},"id":"uUfteg7HIX8E","outputId":"a5551ec8-8f4e-41ee-f8be-79d5dadc1936"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]},{"ename":"NameError","evalue":"name 'T_target' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-9-147902466.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;31m# ---------------------------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 50\u001b[0;31m \u001b[0mB\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mT_target\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# 보통 32\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     51\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mB\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# 0 ~ B-1 중 무작위로 선택 (IndexError 없음)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'T_target' is not defined"]}],"source":["import torch\n","import torch.nn.functional as F\n","import matplotlib.pyplot as plt\n","import os\n","num_layers = len(material_sequence)  # 3\n","class InverseNet(nn.Module):\n","    def __init__(self, input_dim, output_dim):\n","        super().__init__()\n","        self.net = nn.Sequential(\n","            nn.Linear(input_dim, 768),\n","            nn.LeakyReLU(),\n","            nn.Linear(768, 768),\n","            nn.LeakyReLU(),\n","            nn.Linear(768, 768),\n","            nn.LeakyReLU(),\n","            nn.Linear(768, 768),\n","            nn.LeakyReLU(),\n","            nn.Linear(768, output_dim),\n","            nn.Sigmoid()\n","            # no nonlinearity here\n","        )\n","\n","    def forward(self, x):\n","        # x must be shape (B, input_dim)\n","        return self.net(x)\n","\n","# ---------------------------\n","# 1. 저장된 모델 로드\n","# ---------------------------\n","inverse_net = InverseNet(input_dim=NUM_WAVELENGTHS, output_dim=len(material_sequence)).to(device)\n","inverse_net = inverse_net.to(torch.float64)\n","drive.mount('/content/drive')\n","# 모델 파라미터 로드\n","t_path = '/content/drive/MyDrive/Colab Notebooks/Bi-directional20250402'\n","\n","Mod_name = \"inverse_best.pth\"\n","ckpt_path = t_path + \"/\" + Mod_name\n","\n","# ---------------------------\n","# 2. 첫 배치만 inference\n","# ---------------------------\n","import random\n","B = T_target.shape[0]  # 보통 32\n","a = random.randrange(B)  # 0 ~ B-1 중 무작위로 선택 (IndexError 없음)\n","\n","for batch_idx, batch in enumerate(test_loader):\n","    d_norm_true = batch['d_norm'].to(device)     # (B, 3)\n","    T_target = batch['T_target'].to(device)      # (B, 401)\n","\n","    # (1) Target 출력\n","    d_true_nm = destandardize_thickness(d_norm_true)\n","    print(\"=== d_true (nm) ===\")\n","    print(d_true_nm[a].cpu().numpy())\n","    print(\"=== T_target 스펙트럼 ===\")\n","    print(\"min, max, mean = \",\n","          T_target[a].min().item(), T_target[0].max().item(), T_target[0].mean().item())\n","\n","    # (2) 두께 예측\n","    with torch.no_grad():\n","        d_pred_norm = inverse_net(T_target)  # (B, 3)\n","        d_pred_nm = destandardize_thickness(d_pred_norm)\n","\n","    print(\"\\n=== d_pred_norm (표준화된 두께) ===\")\n","    print(d_pred_norm[a].cpu().numpy())\n","    print(\"→ d_pred_nm =\", d_pred_nm[0].cpu().numpy())\n","\n","    # (3) TMM forward (1개씩)\n","    T_pred_list = []\n","    B = T_target.shape[0]\n","    for i in range(B):\n","        thickness_nm = d_pred_nm[i]  # (3,)\n","        T_pred = model(thickness_nm.to(torch.float64))  # (401,)\n","        T_pred_list.append(T_pred)\n","\n","        if batch_idx == 0 and i == 0:\n","            print(\"→ TMM 입력 두께 =\", thickness_nm.cpu().numpy())\n","            print(\"TMM 결과 시각화:\")\n","\n","            T_target_physical = destandardize_spectrum(T_target[i])  # 🔥 반드시 역변환 필요\n","\n","            plt.plot(WAVELENGTHS, T_pred.detach().cpu().numpy().squeeze(), label='T_pred')\n","            plt.plot(WAVELENGTHS, T_target_physical.detach().cpu().numpy().squeeze(), label='T_target', linestyle='dashed')\n","            plt.xlim(380, 780)\n","            plt.ylim(0, 1)\n","            plt.xlabel(\"Wavelength (nm)\")\n","            plt.ylabel(\"Transmittance\")\n","            plt.grid(True)\n","            plt.legend()\n","            plt.show()\n","\n","    # (4) MSE 계산\n","    T_pred_batch = torch.stack(T_pred_list, dim=0)  # (B, 401)\n","    mse_loss = F.mse_loss(T_pred_batch, T_target)\n","    print(f\"\\n첫 배치 전체 MSE loss = {mse_loss.item():.6f}\")\n","    break  # 첫 배치만 체크하고 종료\n"]},{"cell_type":"markdown","metadata":{"id":"54mL3MMTIV01"},"source":["# **이미 저장된거**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":402},"executionInfo":{"elapsed":5223,"status":"error","timestamp":1752133241782,"user":{"displayName":"이스타의행운","userId":"08935579543132628543"},"user_tz":-540},"id":"m-QS_Pb4gxEB","outputId":"984f8129-740a-406f-b33f-1f66ffddfea4"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]},{"ename":"RuntimeError","evalue":"Error(s) in loading state_dict for InverseNet:\n\tUnexpected key(s) in state_dict: \"net.10.weight\", \"net.10.bias\". \n\tsize mismatch for net.8.weight: copying a param with shape torch.Size([768, 768]) from checkpoint, the shape in current model is torch.Size([3, 768]).\n\tsize mismatch for net.8.bias: copying a param with shape torch.Size([768]) from checkpoint, the shape in current model is torch.Size([3]).","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-10-2531851334.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0mckpt_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mMod_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 42\u001b[0;31m \u001b[0minverse_net\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_state_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mckpt_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmap_location\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     43\u001b[0m \u001b[0minverse_net\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# 평가모드\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     44\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"모델 로드 완료: {ckpt_path}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36mload_state_dict\u001b[0;34m(self, state_dict, strict, assign)\u001b[0m\n\u001b[1;32m   2579\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2580\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror_msgs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2581\u001b[0;31m             raise RuntimeError(\n\u001b[0m\u001b[1;32m   2582\u001b[0m                 \"Error(s) in loading state_dict for {}:\\n\\t{}\".format(\n\u001b[1;32m   2583\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"\\n\\t\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror_msgs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: Error(s) in loading state_dict for InverseNet:\n\tUnexpected key(s) in state_dict: \"net.10.weight\", \"net.10.bias\". \n\tsize mismatch for net.8.weight: copying a param with shape torch.Size([768, 768]) from checkpoint, the shape in current model is torch.Size([3, 768]).\n\tsize mismatch for net.8.bias: copying a param with shape torch.Size([768]) from checkpoint, the shape in current model is torch.Size([3])."]}],"source":["import torch\n","import torch.nn.functional as F\n","import matplotlib.pyplot as plt\n","import os\n","num_layers = len(material_sequence)  # 3\n","class InverseNet(nn.Module):\n","    def __init__(self, input_dim, output_dim):\n","        super().__init__()\n","        self.net = nn.Sequential(\n","            nn.Linear(input_dim, 768),\n","            nn.LeakyReLU(),\n","            nn.Linear(768, 768),\n","            nn.LeakyReLU(),\n","            nn.Linear(768, 768),\n","            nn.LeakyReLU(),\n","            nn.Linear(768, 768),\n","            nn.LeakyReLU(),\n","            nn.Linear(768, output_dim),\n","            nn.Sigmoid()\n","            # no nonlinearity here\n","        )\n","\n","    def forward(self, x):\n","        # x must be shape (B, input_dim)\n","        return self.net(x)\n","\n","# ---------------------------\n","# 1. 저장된 모델 로드\n","# ---------------------------\n","inverse_net = InverseNet(input_dim=NUM_WAVELENGTHS, output_dim=len(material_sequence)).to(device)\n","inverse_net = inverse_net.to(torch.float64)\n","drive.mount('/content/drive')\n","# 모델 파라미터 로드\n","t_path = '/content/drive/MyDrive/Colab Notebooks/Bi-directional20250402'\n","\n","Mod_name = \"inverse_best_New.pth\"\n","ckpt_path = t_path + \"/\" + Mod_name\n","\n","# ✅ 추천 코드 ②: os.path.join() 사용 (운영체제 독립적)\n","ckpt_path = os.path.join(t_path, Mod_name)\n","\n","inverse_net.load_state_dict(torch.load(ckpt_path, map_location=device))\n","inverse_net.eval()  # 평가모드\n","print(f\"모델 로드 완료: {ckpt_path}\")\n","\n","# ---------------------------\n","# 2. 첫 배치만 inference\n","# ---------------------------\n","for batch_idx, batch in enumerate(test_loader):\n","    d_norm_true = batch['d_norm'].to(device)     # (B, 3)\n","    T_target = batch['T_target'].to(device)      # (B, 401)\n","\n","    # (1) Target 출력\n","    d_true_nm = destandardize_thickness(d_norm_true)\n","    print(\"=== d_true (nm) ===\")\n","    print(d_true_nm[0].cpu().numpy())\n","    print(\"=== T_target 스펙트럼 ===\")\n","    print(\"min, max, mean = \",\n","          T_target[0].min().item(), T_target[0].max().item(), T_target[0].mean().item())\n","\n","    # (2) 두께 예측\n","    with torch.no_grad():\n","        d_pred_norm = inverse_net(T_target)  # (B, 3)\n","        d_pred_nm = destandardize_thickness(d_pred_norm)\n","\n","    print(\"\\n=== d_pred_norm (표준화된 두께) ===\")\n","    print(d_pred_norm[0].cpu().numpy())\n","    print(\"→ d_pred_nm =\", d_pred_nm[0].cpu().numpy())\n","\n","    # (3) TMM forward (1개씩)\n","    T_pred_list = []\n","    for i in range(T_target.shape[0]):\n","        thickness_nm = d_pred_nm[i]  # (3,)\n","        T_pred = model(thickness_nm.to(torch.float64))  # (401,)\n","        T_pred_list.append(T_pred)\n","\n","        if batch_idx == 0 and i == 0:\n","            print(\"→ TMM 입력 두께 =\", thickness_nm.cpu().numpy())\n","            print(\"TMM 결과 시각화:\")\n","\n","            T_target_physical = destandardize_spectrum(T_target[i])  # 🔥 반드시 역변환 필요\n","\n","            plt.plot(WAVELENGTHS, T_pred.detach().cpu().numpy().squeeze(), label='T_pred')\n","            plt.plot(WAVELENGTHS, T_target_physical.detach().cpu().numpy().squeeze(), label='T_target', linestyle='dashed')\n","            plt.xlim(380, 780)\n","            plt.ylim(0, 1)\n","            plt.xlabel(\"Wavelength (nm)\")\n","            plt.ylabel(\"Transmittance\")\n","            plt.grid(True)\n","            plt.legend()\n","            plt.show()\n","\n","    # (4) MSE 계산\n","    T_pred_batch = torch.stack(T_pred_list, dim=0)  # (B, 401)\n","    mse_loss = F.mse_loss(T_pred_batch, T_target)\n","    print(f\"\\n첫 배치 전체 MSE loss = {mse_loss.item():.6f}\")\n","    break  # 첫 배치만 체크하고 종료\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12915,"status":"ok","timestamp":1752568397451,"user":{"displayName":"이스타의행운","userId":"08935579543132628543"},"user_tz":-540},"id":"9ck4CCcVYrW7","outputId":"3f6b6f1e-eb92-4c6d-8194-469986bfd4a2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Generating (normalized_d → T_target) pairs ...\n","Mean per dimension (d1, d2, d3): tensor([[ 22.5000, 475.0000,  22.5000]], dtype=torch.float64)\n","Std per dimension  (d1, d2, d3): tensor([[ 11.4564, 189.0767,  11.4564]], dtype=torch.float64)\n","Standardized thickness sample: tensor([[-1.5275, -1.7189, -1.0911]], dtype=torch.float64)\n","Restored thickness sample: tensor([[  5., 150.,  10.]], dtype=torch.float64)\n","Total samples: 8384\n"]}],"source":["all_d = []\n","all_T_target = []\n","\n","print(\"Generating (normalized_d → T_target) pairs ...\")\n","for d1 in d1_list_nm:\n","    for d2 in d2_list_nm:\n","        for d3 in d3_list_nm:\n","            # (a) [d1, d2, d3]\n","            d_nm_vec = torch.tensor([[d1, d2, d3]], dtype=torch.float64)  # shape: (1, 3)\n","            all_d.append(d_nm_vec.cpu().numpy())\n","            # (b) TMM forward\n","            T_spec = model(d_nm_vec.to(device))  # forward(nm 단위 두께)\n","            all_T_target.append(T_spec.detach().cpu().numpy())\n","# NumPy 배열로 변환\n","all_d = np.array(all_d, dtype=np.float64)   # shape: (3096, 3)\n","#ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ두께표준화ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n","THICKNESS_MEAN = torch.tensor(np.mean(all_d, axis=0), dtype=torch.float64, device=device)\n","THICKNESS_STD  = torch.tensor(np.std(all_d, axis=0),  dtype=torch.float64, device=device)\n","def standardize_thickness(d_nm_array):\n","    if not isinstance(d_nm_array, torch.Tensor):\n","        d_nm_array = torch.tensor(d_nm_array, dtype=torch.float64, device=THICKNESS_MEAN.device)\n","    else:\n","        d_nm_array = d_nm_array.to(dtype=torch.float64, device=THICKNESS_MEAN.device)\n","    return (d_nm_array - THICKNESS_MEAN) / THICKNESS_STD\n","\n","def destandardize_thickness(d_norm_array):\n","    d_norm_array = d_norm_array.clone().to(dtype=torch.float64, device=THICKNESS_MEAN.device)\n","    return d_norm_array * THICKNESS_STD + THICKNESS_MEAN\n","\n","all_d_norm = standardize_thickness(all_d)  # shape: (3096, 3)\n","d_nm_check = destandardize_thickness(all_d_norm)\n","\n","\n","print(\"Mean per dimension (d1, d2, d3):\", THICKNESS_MEAN)\n","print(\"Std per dimension  (d1, d2, d3):\", THICKNESS_STD)\n","print(\"Standardized thickness sample:\", all_d_norm[1])\n","print(\"Restored thickness sample:\", destandardize_thickness(all_d_norm[1]))\n","\n","\n","\n","#ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ스펙트럼표준화ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n","all_T_target = np.array(all_T_target, dtype=np.float64) # shape: (3096, 401)\n","print(\"Total samples:\", all_d.shape[0])  # 3096\n","\n","SPECTRUM_MEAN = torch.tensor(np.mean(all_T_target, axis=0), dtype=torch.float64).to(device)\n","SPECTRUM_STD = torch.tensor(np.std(all_T_target, axis=0), dtype=torch.float64).to(device)\n","def standardize_spectrum(T_array):\n","    # 1. 입력받은 NumPy 배열(T_array)을 PyTorch 텐서로 변환하고 GPU로 보냅니다.\n","    T_tensor = torch.tensor(T_array, dtype=torch.float64).to(device)\n","\n","    # 2. 이제 GPU 텐서끼리의 연산을 수행합니다.\n","    return (T_tensor - SPECTRUM_MEAN) / SPECTRUM_STD\n","def destandardize_spectrum(T_std_array):\n","    return T_std_array * SPECTRUM_STD + SPECTRUM_MEAN\n","\n","# destandardize_spectrum의 결과(GPU 텐서)를 .cpu().numpy()로 변환하여 비교합니다.\n","all_T_target_std = standardize_spectrum(all_T_target)\n","restored_T = destandardize_spectrum(all_T_target_std)\n","assert np.allclose(restored_T.cpu().numpy(), all_T_target, atol=1e-5)\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":228},"executionInfo":{"elapsed":89,"status":"error","timestamp":1752561671625,"user":{"displayName":"이스타의행운","userId":"08935579543132628543"},"user_tz":-540},"id":"n3nu_O5eYh5F","outputId":"341e15cb-a53a-4188-b582-c7ae9dbd2834"},"outputs":[{"name":"stdout","output_type":"stream","text":["Generating (normalized_d → T_target) pairs ...\n"]},{"ename":"NameError","evalue":"name 'model' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-5-539653682.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m             \u001b[0mall_d\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0md_nm_vec\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcpu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m             \u001b[0;31m# (b) TMM forward\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m             \u001b[0mT_spec\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0md_nm_vec\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# forward(nm 단위 두께)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m             \u001b[0mall_T_target\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mT_spec\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdetach\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcpu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;31m# NumPy 배열로 변환\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"]}],"source":["from torch.utils.data import random_split\n","all_d = []\n","all_T_target = []\n","\n","print(\"Generating (normalized_d → T_target) pairs ...\")\n","for d1 in d1_list_nm:\n","    for d2 in d2_list_nm:\n","        for d3 in d3_list_nm:\n","            # (a) [d1, d2, d3]\n","            d_nm_vec = torch.tensor([[d1, d2, d3]], dtype=torch.float64)  # shape: (1, 3)\n","            all_d.append(d_nm_vec.cpu().numpy())\n","            # (b) TMM forward\n","            T_spec = model(d_nm_vec.to(device))  # forward(nm 단위 두께)\n","            all_T_target.append(T_spec.detach().cpu().numpy())\n","# NumPy 배열로 변환\n","all_d = np.array(all_d, dtype=np.float64)   # shape: (3096, 3)\n","#ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ두께표준화ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n","THICKNESS_MIN = torch.tensor(np.min(all_d, axis=0), dtype=torch.float64, device=device)\n","THICKNESS_MAX = torch.tensor(np.max(all_d, axis=0), dtype=torch.float64, device=device)\n","def standardize_thickness(d_nm_array):\n","    d_nm_array = torch.tensor(d_nm_array, dtype=torch.float64, device=THICKNESS_MIN.device) if not isinstance(d_nm_array, torch.Tensor) else d_nm_array.to(dtype=torch.float64, device=THICKNESS_MIN.device)\n","    return (d_nm_array - THICKNESS_MIN) / (THICKNESS_MAX - THICKNESS_MIN)\n","\n","def destandardize_thickness(d_norm_array):\n","    d_norm_array = d_norm_array.clone().to(dtype=torch.float64, device=THICKNESS_MIN.device)\n","    return d_norm_array * (THICKNESS_MAX - THICKNESS_MIN) + THICKNESS_MIN\n","\n","all_d_norm = standardize_thickness(all_d)  # shape: (3096, 3)\n","d_nm_check = destandardize_thickness(all_d_norm)\n","\n","\n","#ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ스펙트럼표준화ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ\n","all_T_target = np.array(all_T_target, dtype=np.float64) # shape: (3096, 401)\n","print(\"Total samples:\", all_d.shape[0])  # 3096\n","\n","SPECTRUM_MIN = torch.tensor(np.min(all_T_target, axis=0), dtype=torch.float64).to(device)\n","SPECTRUM_MAX = torch.tensor(np.max(all_T_target, axis=0), dtype=torch.float64).to(device)\n","def standardize_spectrum(T_array):\n","    T_tensor = torch.tensor(T_array, dtype=torch.float64).to(device)\n","    return (T_tensor - SPECTRUM_MIN) / (SPECTRUM_MAX - SPECTRUM_MIN)\n","\n","def destandardize_spectrum(T_std_array):\n","    return T_std_array * (SPECTRUM_MAX - SPECTRUM_MIN) + SPECTRUM_MIN\n","\n","# destandardize_spectrum의 결과(GPU 텐서)를 .cpu().numpy()로 변환하여 비교합니다.\n","all_T_target_std = standardize_spectrum(all_T_target)\n","restored_T = destandardize_spectrum(all_T_target_std)\n","assert np.allclose(restored_T.cpu().numpy(), all_T_target, atol=1e-5)\n","\n","# ────────────────────────────────────────────────────────────────────────────\n","# (B) Dataset / DataLoader 구축\n","# ────────────────────────────────────────────────────────────────────────────\n","class BiTMMNormalizedDataset(Dataset):\n","    def __init__(self, d_norm_array, T_array):\n","        self.d_norm = d_norm_array.clone().to(dtype=torch.float64)\n","        self.T_spec = T_array.clone().detach().to(dtype=torch.float64) if isinstance(T_array, torch.Tensor) else torch.tensor(T_array, dtype=torch.float64)\n","\n","    def __len__(self):\n","        return self.d_norm.shape[0]\n","\n","    def __getitem__(self, idx):\n","        return {\n","            'd_norm': self.d_norm[idx],       # shape: (3,)1\n","            'T_target': self.T_spec[idx]      # shape: (401,)\n","        }\n","\n","batch_size = 32\n","\n","\n","# 시드 고정\n","seed = 42\n","g = torch.Generator().manual_seed(seed)\n","\n","# Dataset 생성\n","dataset = BiTMMNormalizedDataset(all_d_norm, all_T_target_std)\n","\n","# 전체 길이 및 split 비율\n","total_size = len(dataset)\n","train_size = int(0.9 * total_size)\n","val_size   = int(0.05 * total_size)\n","test_size  = total_size - train_size - val_size  # 나머지\n","\n","print(f\"Total: {total_size}, Train: {train_size}, Val: {val_size}, Test: {test_size}\")\n","\n","# Dataset 분할\n","train_dataset, val_dataset, test_dataset = random_split(\n","    dataset, [train_size, val_size, test_size], generator=g  # g로 통일\n",")\n","\n","# DataLoader 정의\n","train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True,  num_workers=0, generator=g)\n","val_loader   = DataLoader(val_dataset,   batch_size=batch_size, shuffle=False, num_workers=0)\n","test_loader  = DataLoader(test_dataset,  batch_size=batch_size, shuffle=False, num_workers=0)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":245},"executionInfo":{"elapsed":4268,"status":"error","timestamp":1752561643765,"user":{"displayName":"이스타의행운","userId":"08935579543132628543"},"user_tz":-540},"id":"ExQ4bWB0Td_c","outputId":"dfedb9a4-f63a-4c5b-d36c-36db8e6d20bc"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","모델 로드 완료: /content/drive/MyDrive/Colab Notebooks/Bi-directional20250402/inverse_best_New.pth\n"]},{"ename":"NameError","evalue":"name 'all_d' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-4-2762517483.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     45\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[0;31m# ✅ 두께 정규화 / 역정규화 (고정 mean, std)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 47\u001b[0;31m \u001b[0mTHICKNESS_MIN\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall_d\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat64\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     48\u001b[0m \u001b[0mTHICKNESS_MAX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall_d\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat64\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'all_d' is not defined"]}],"source":["num_layers = len(material_sequence)  # 3\n","class InverseNet(nn.Module):\n","    def __init__(self, input_dim, output_dim):\n","        super().__init__()\n","        self.net = nn.Sequential(\n","            nn.Linear(input_dim, 768),  # net.0\n","            nn.LeakyReLU(),             # net.1\n","            nn.Linear(768, 768),        # net.2\n","            nn.LeakyReLU(),             # net.3\n","            nn.Linear(768, 768),        # net.4\n","            nn.LeakyReLU(),             # net.5\n","            nn.Linear(768, 768),        # net.6\n","            nn.LeakyReLU(),             # net.7\n","            nn.Linear(768, 768),        # net.8 ← 수정\n","            nn.LeakyReLU(),             # net.9 ← 추가\n","            nn.Linear(768, output_dim), # net.10 ← 최종 출력\n","            nn.Sigmoid()                # net.11 ← 출력 정규화\n","        )\n","\n","    def forward(self, x):\n","        return self.net(x)\n","\n","# ---------------------------\n","# 1. 저장된 모델 로드\n","# ---------------------------\n","inverse_net = InverseNet(input_dim=NUM_WAVELENGTHS, output_dim=len(material_sequence)).to(device)\n","inverse_net = inverse_net.to(torch.float64)\n","drive.mount('/content/drive')\n","# 모델 파라미터 로드\n","t_path = '/content/drive/MyDrive/Colab Notebooks/Bi-directional20250402'\n","\n","Mod_name = \"inverse_best_New.pth\"\n","ckpt_path = t_path + \"/\" + Mod_name\n","\n","# ✅ 추천 코드 ②: os.path.join() 사용 (운영체제 독립적)\n","ckpt_path = os.path.join(t_path, Mod_name)\n","\n","inverse_net.load_state_dict(torch.load(ckpt_path, map_location=device))\n","inverse_net.eval()  # 평가모드\n","print(f\"모델 로드 완료: {ckpt_path}\")\n","\n","\n","import pandas as pd\n","import torch\n","\n","# ✅ 두께 정규화 / 역정규화 (고정 mean, std)\n","THICKNESS_MIN = torch.tensor(np.min(all_d, axis=0), dtype=torch.float64, device=device)\n","THICKNESS_MAX = torch.tensor(np.max(all_d, axis=0), dtype=torch.float64, device=device)\n","\n","def standardize_thickness(d_nm_array):\n","    d_nm_array = torch.tensor(d_nm_array, dtype=torch.float64, device=THICKNESS_MIN.device) if not isinstance(d_nm_array, torch.Tensor) else d_nm_array.to(dtype=torch.float64, device=THICKNESS_MIN.device)\n","    return (d_nm_array - THICKNESS_MIN) / (THICKNESS_MAX - THICKNESS_MIN)\n","\n","def destandardize_thickness(d_norm_array):\n","    d_norm_array = d_norm_array.clone().to(dtype=torch.float64, device=THICKNESS_MIN.device)\n","    return d_norm_array * (THICKNESS_MAX - THICKNESS_MIN) + THICKNESS_MIN\n","\n","# ✅ 스펙트럼 정규화 / 역정규화도 동일하게 고정값으로 정의 (원래 사용한 고정 mean/std가 있다면 여기에 넣으세요)\n","SPECTRUM_MIN = torch.tensor(np.min(all_T_target, axis=0), dtype=torch.float64).to(device)\n","SPECTRUM_MAX = torch.tensor(np.max(all_T_target, axis=0), dtype=torch.float64).to(device)\n","def standardize_spectrum(T_array):\n","    T_tensor = torch.tensor(T_array, dtype=torch.float64).to(device)\n","    return (T_tensor - SPECTRUM_MIN) / (SPECTRUM_MAX - SPECTRUM_MIN)\n","\n","def destandardize_spectrum(T_std_array):\n","    return T_std_array * (SPECTRUM_MAX - SPECTRUM_MIN) + SPECTRUM_MIN\n","\n","# ──────────────────────────────\n","#     전체 예측 파이프라인\n","# ──────────────────────────────\n","excel_path = \"/content/drive/MyDrive/Colab Notebooks/Bi-directional20250402/TMM_Result_Full.xlsx\"\n","# (1) 엑셀 파일 로드\n","df = pd.read_excel(excel_path, header=None)\n","\n","# (2) 3번째 열부터 끝까지 0.01 곱해서 스케일을 0~1로 맞춤\n","df.iloc[:, 3:] = df.iloc[:, 3:] * 0.01\n","\n","# (3) 이제 변환된 스펙트럼 배열을 추출\n","spectrum_array = df.iloc[:, 3:].values  # (N, 401)\n","# (3) 텐서 변환 및 정규화\n","spectrum_tensor = torch.tensor(spectrum_array, dtype=torch.float64)\n","spectrum_tensor_std = standardize_spectrum(spectrum_tensor)\n","\n","# (4) InverseNet 예측 (두께 예측)\n","inverse_net.eval()\n","with torch.no_grad():\n","    pred_d_norm = inverse_net(spectrum_tensor_std)  # (N, 3)\n","    pred_d_nm = destandardize_thickness(pred_d_norm).cpu().numpy()  # (N, 3)\n","\n","# (5) 결과 DataFrame 생성\n","pred_df = pd.DataFrame(pred_d_nm, columns=[\"pred_d1\", \"pred_d2\", \"pred_d3\"])\n","\n","# (6) 정답 두께 열 붙이기\n","true_d_array = df.iloc[:, :3].values\n","pred_df[[\"true_d1\", \"true_d2\", \"true_d3\"]] = true_d_array\n","\n","# (7) 저장\n","pred_df.to_excel(\"predicted_thickness_result.xlsx\", index=False)\n","print(\"✅ 결과가 predicted_thickness_result.xlsx 로 저장되었습니다.\")\n","print()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":227,"status":"ok","timestamp":1752133282028,"user":{"displayName":"이스타의행운","userId":"08935579543132628543"},"user_tz":-540},"id":"fGnZRMK5VXNk","outputId":"a9e98469-98a3-43e8-8c56-9fac52cd4420"},"outputs":[{"name":"stdout","output_type":"stream","text":["✅ 예측 결과가 엑셀로 저장되었습니다: /content/predicted_thickness_results66.xlsx\n"]}],"source":["output_path = \"/content/predicted_thickness_results66.xlsx\"\n","pred_df.to_excel(output_path, index=False)\n","\n","print(f\"✅ 예측 결과가 엑셀로 저장되었습니다: {output_path}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":427},"executionInfo":{"elapsed":6469,"status":"ok","timestamp":1749988375224,"user":{"displayName":"이스타의행운","userId":"08935579543132628543"},"user_tz":-540},"id":"rxzwN2hMbLzr","outputId":"8581bbfd-92ec-401a-9c05-fd471dd1ae1d"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 800x400 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["🔍 전체 MSE (예측 vs 정답 스펙트럼): 838.255360\n"]}],"source":["import pandas as pd\n","import torch\n","import torch.nn.functional as F\n","import matplotlib.pyplot as plt\n","\n","# ─────────────────────────────────────────────\n","# (1) 엑셀 파일에서 스펙트럼 로드 (컬럼 없음 가정)\n","# ─────────────────────────────────────────────\n","df = pd.read_excel('TMM_Result_Full.xlsx', header=None)\n","\n","\n","spectrum_array = df.iloc[:, 3:].values         # shape: (N, 401)\n","\n","# (2) 텐서 변환\n","spectrum_tensor = torch.tensor(spectrum_array, dtype=torch.float64).to(device) # 여기서 스펙트럼 가지고와서 표준화함/\n","\n","\n","# ─────────────────────────────────────────────\n","# (3) 스펙트럼 표준화\n","# ─────────────────────────────────────────────\n","spectrum_std = normalize_spectrum(spectrum_tensor) # 스펙트럼 표준화됨\n","\n","# ─────────────────────────────────────────────\n","# (4) 두께 예측\n","# ─────────────────────────────────────────────\n","inverse_net.eval()\n","with torch.no_grad():\n","    d_pred_norm = inverse_net(spectrum_std)\n","    d_pred_nm = denormalize_thickness(d_pred_norm)\n","\n","# ─────────────────────────────────────────────\n","# (5) TMM으로 예측 스펙트럼 계산\n","# ─────────────────────────────────────────────\n","T_pred_list = []\n","for i in range(len(d_pred_nm)):\n","    thickness_nm = d_pred_nm[i]\n","    T_pred = model(thickness_nm.unsqueeze(0))  # shape: (1, 401)\n","    T_pred_list.append(T_pred.squeeze(0))\n","\n","T_pred_batch = torch.stack(T_pred_list, dim=0)  # shape: (N, 401)\n","\n","# ─────────────────────────────────────────────\n","# (6) 정답 스펙트럼 (역정규화)\n","# ─────────────────────────────────────────────\n","T_target_physical = denormalize_spectrum(spectrum_std)\n","\n","# ─────────────────────────────────────────────\n","# (7) 시각화 (첫 샘플)\n","# ─────────────────────────────────────────────\n","plt.figure(figsize=(8, 4))\n","plt.plot(WAVELENGTHS, T_pred_batch[0].detach().cpu().numpy(), label='T_pred')\n","plt.plot(WAVELENGTHS, T_target_physical[0].detach().cpu().numpy(), label='T_target', linestyle='dashed')\n","plt.xlim(380, 780)\n","plt.ylim(0, 1)\n","plt.xlabel(\"Wavelength (nm)\")\n","plt.ylabel(\"Transmittance\")\n","plt.grid(True)\n","plt.legend()\n","plt.title(\"Predicted vs. Target Spectrum\")\n","plt.show()\n","\n","# ─────────────────────────────────────────────\n","# (8) MSE 계산 (전체)\n","# ─────────────────────────────────────────────\n","mse_loss = F.mse_loss(T_pred_batch, T_target_physical)\n","print(f\"🔍 전체 MSE (예측 vs 정답 스펙트럼): {mse_loss.item():.6f}\")\n"]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"A100","provenance":[],"authorship_tag":"ABX9TyPOpAnKhVQ2Iu0dajhOt/u5"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"9552502240fe4bb4b3a6bc988303cce4":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_62ac53b6aa884018a9f5dcca5316e736","IPY_MODEL_d6a8770bacc14497973f4759273871ef","IPY_MODEL_4872325922244707b1685430fe8a293c"],"layout":"IPY_MODEL_08e2088511f349cdb9d183810ea628c4"}},"62ac53b6aa884018a9f5dcca5316e736":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e3205319cdd746459691347cc973b448","placeholder":"​","style":"IPY_MODEL_1cb837011565429cb4cfcf86b0d70ac1","value":"Training Progress: 100%"}},"d6a8770bacc14497973f4759273871ef":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_551f2800e40846c1aef31a2f3d3a8125","max":502,"min":0,"orientation":"horizontal","style":"IPY_MODEL_61544c9d03be41088f8fafbcebbb5c31","value":502}},"4872325922244707b1685430fe8a293c":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_bd2c496b87d44619834d39b3a323ef01","placeholder":"​","style":"IPY_MODEL_6f37e5b0c69a4d2a99307ee5b54e50be","value":" 502/502 [10:09&lt;00:00,  1.21s/it, train_loss=0.001863, val_loss=0.001982]"}},"08e2088511f349cdb9d183810ea628c4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e3205319cdd746459691347cc973b448":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1cb837011565429cb4cfcf86b0d70ac1":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"551f2800e40846c1aef31a2f3d3a8125":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"61544c9d03be41088f8fafbcebbb5c31":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"bd2c496b87d44619834d39b3a323ef01":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6f37e5b0c69a4d2a99307ee5b54e50be":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"5fc39b2688bd48d88923a1104eebb2c3":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_bb23b06cc2cb41eda309ca8ad748f238","IPY_MODEL_6c9e56671cf9443e97e72ca6275881dc","IPY_MODEL_402ec366d56c47aca6723c809ee78877"],"layout":"IPY_MODEL_33f7b112927140e097b1910abfd87e29"}},"bb23b06cc2cb41eda309ca8ad748f238":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_8a45b670ec694b10afe0ef7ab79eae1e","placeholder":"​","style":"IPY_MODEL_717b4f33c1144f7ab8ecf5bfe077ace6","value":"Training Progress: 100%"}},"6c9e56671cf9443e97e72ca6275881dc":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_ac558832aa1a4d0dba1f23d16a5b2e49","max":514,"min":0,"orientation":"horizontal","style":"IPY_MODEL_76bf3f7cdf9a4dc3b06bc8fa794d1e64","value":514}},"402ec366d56c47aca6723c809ee78877":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0bc6e1b578eb4cc0ae002fc64b02d04d","placeholder":"​","style":"IPY_MODEL_987c73a2430747a3895e14a4c23ec520","value":" 514/514 [20:23&lt;00:00,  2.37s/it, train_loss=0.001232, val_loss=0.001796]"}},"33f7b112927140e097b1910abfd87e29":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8a45b670ec694b10afe0ef7ab79eae1e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"717b4f33c1144f7ab8ecf5bfe077ace6":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ac558832aa1a4d0dba1f23d16a5b2e49":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"76bf3f7cdf9a4dc3b06bc8fa794d1e64":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"0bc6e1b578eb4cc0ae002fc64b02d04d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"987c73a2430747a3895e14a4c23ec520":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"722056d659254629829d2a559faa91d2":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_16e2e3f0151f499b813ecff2aae0c4b3","IPY_MODEL_793875651e1e444f9b2dcfaee591e2eb","IPY_MODEL_f9adb6bd6e5b41239e452ef5725036f4"],"layout":"IPY_MODEL_f480fd6303cd47dd84ec1a557c18ad17"}},"16e2e3f0151f499b813ecff2aae0c4b3":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e01098ffd03e4958b2141b52e92c3b80","placeholder":"​","style":"IPY_MODEL_76282f7648da4c9988424cb07f70b5f1","value":"Training Progress: 100%"}},"793875651e1e444f9b2dcfaee591e2eb":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_630619495b6842fabb245ff25273ebb7","max":506,"min":0,"orientation":"horizontal","style":"IPY_MODEL_e07f080d76a540cbb090a2ab11b72e0d","value":506}},"f9adb6bd6e5b41239e452ef5725036f4":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_fa9c631253e944308cbb51ffee29eca6","placeholder":"​","style":"IPY_MODEL_e63f5d3c021b499ea035380d7c672d7c","value":" 506/506 [05:57&lt;00:00,  1.41it/s, train_loss=0.006597, val_loss=0.007546]"}},"f480fd6303cd47dd84ec1a557c18ad17":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e01098ffd03e4958b2141b52e92c3b80":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"76282f7648da4c9988424cb07f70b5f1":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"630619495b6842fabb245ff25273ebb7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e07f080d76a540cbb090a2ab11b72e0d":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"fa9c631253e944308cbb51ffee29eca6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e63f5d3c021b499ea035380d7c672d7c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"5a1c00c5909e493e99824e449161855a":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_2109e5db924f46018b391ce47414264c","IPY_MODEL_c4e3d268bab641ddbad8ab158687077d","IPY_MODEL_0c8c349a7ffb449c9923476f3c725a11"],"layout":"IPY_MODEL_2ee49ec3941a45d8bae6e931f47c43b5"}},"2109e5db924f46018b391ce47414264c":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f3a983e56f404af7b548b7302a52f00f","placeholder":"​","style":"IPY_MODEL_36ff59f7cff64d20958c6d8580cb58c2","value":"Training Progress: 100%"}},"c4e3d268bab641ddbad8ab158687077d":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_bde5be029e274e18998a7e8a5ac27825","max":591,"min":0,"orientation":"horizontal","style":"IPY_MODEL_f7f8055f070a45c38d860dd0141cbe41","value":591}},"0c8c349a7ffb449c9923476f3c725a11":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e1a12a911c85492e94611e4c68fa2443","placeholder":"​","style":"IPY_MODEL_152dad54243b4581bbc168f34099e1a8","value":" 591/591 [07:30&lt;00:00,  1.32it/s, train_loss=0.003204, val_loss=0.003773]"}},"2ee49ec3941a45d8bae6e931f47c43b5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f3a983e56f404af7b548b7302a52f00f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"36ff59f7cff64d20958c6d8580cb58c2":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"bde5be029e274e18998a7e8a5ac27825":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f7f8055f070a45c38d860dd0141cbe41":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"e1a12a911c85492e94611e4c68fa2443":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"152dad54243b4581bbc168f34099e1a8":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"fe093b294ccc4d7f8db66198982bbe6d":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_85e2fbe89f22451797f601a5ae653c1c","IPY_MODEL_469a83682e7a41bcb837a13f3cd3e385","IPY_MODEL_d9799a0b588c48e99764fb950784d6a0"],"layout":"IPY_MODEL_1b7387dfd6294aa49ee3e79a65cc13e6"}},"85e2fbe89f22451797f601a5ae653c1c":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_9cfd9246e6ec4415abd4a1d477eb0fcd","placeholder":"​","style":"IPY_MODEL_a6e7cbd9b3ce4cc685e6df6ea68de321","value":"Training Progress:   0%"}},"469a83682e7a41bcb837a13f3cd3e385":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_99a801d221c141e7919845a8aeb43777","max":560,"min":0,"orientation":"horizontal","style":"IPY_MODEL_ce04d758408342fda4285ff9d29f7abc","value":0}},"d9799a0b588c48e99764fb950784d6a0":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f7b2e27c744e4249bb08265e7dd11988","placeholder":"​","style":"IPY_MODEL_c0be7e228a4748f085fb7478dc744f6c","value":" 0/560 [00:00&lt;?, ?it/s]"}},"1b7387dfd6294aa49ee3e79a65cc13e6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9cfd9246e6ec4415abd4a1d477eb0fcd":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a6e7cbd9b3ce4cc685e6df6ea68de321":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"99a801d221c141e7919845a8aeb43777":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ce04d758408342fda4285ff9d29f7abc":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"f7b2e27c744e4249bb08265e7dd11988":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c0be7e228a4748f085fb7478dc744f6c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":0}